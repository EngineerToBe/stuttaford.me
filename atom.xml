<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Robert Stuttaford</title><link href="http://www.stuttaford.me/atom.xml" rel="self" /><link href="http://www.stuttaford.me/" /><updated>2014-08-23T13:21:04Z</updated><id>http://www.stuttaford.me</id><author><name>Robert Stuttaford</name><email>robert.stuttaford@gmail.com</email></author><entry><title>Om interop with 3rd party JS libs</title><link href="http://www.stuttaford.me/2014/08/10/om-interop-with-3rd-party-libs/" /><updated>2014-08-23T13:21:04Z</updated><id>http://www.stuttaford.me/2014/08/10/om-interop-with-3rd-party-libs/</id><content type="html">&lt;p&gt;A couple days ago, I cheekily tweeted a piece of code for embedding the fantastic &lt;a href=&quot;http://ace.c9.io/&quot;&gt;Ace&lt;/a&gt; Javascript editor in an Om app. I say cheekily, because I wrote the code in the &lt;a href=&quot;https://www.refheap.com&quot;&gt;RefHeap&lt;/a&gt; editor and didn&apos;t actually test it!&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;blockquote align=&quot;center&quot; lang=&quot;en&quot; class=&quot;twitter-tweet&quot;&gt; &lt;p&gt;The essence of how to use icky mutable JS components like Ace editor with &lt;a href=&quot;https://twitter.com/hashtag/Om?src=hash&quot;&gt;#Om&lt;/a&gt; - well, with any &lt;a href=&quot;https://twitter.com/hashtag/ReactJS?src=hash&quot;&gt;#ReactJS&lt;/a&gt; really:&lt;a href=&quot;https://t.co/Tjx69JFsIk&quot;&gt;https://t.co/Tjx69JFsIk&lt;/a&gt;&lt;/p&gt;— Robert Stuttaford (@RobStuttaford) &lt;a href=&quot;https://twitter.com/RobStuttaford/statuses/497397737923833856&quot;&gt;August 7, 2014&lt;/a&gt;&lt;/blockquote&gt; &lt;script charset=&quot;utf-8&quot; src=&quot;//platform.twitter.com/widgets.js&quot; async=&quot;async&quot;&gt;&lt;/script&gt;&lt;p&gt;Anyone who was brave enough to test it out using this code as a starting point would have run into several issues. This post attempts to make up for those, by sharing how it works and providing usable code!&lt;/p&gt;&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: Here&apos;s the full source:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/robert-stuttaford/om-ace-demo/blob/master/src/om_ace_demo.cljs#L1&quot;&gt;https://github.com/robert-stuttaford/om-ace-demo&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;The basic idea&lt;/h2&gt;&lt;p&gt;So, as you likely already know, &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; (for which &lt;a href=&quot;https://github.com/swannodette/om&quot;&gt;Om&lt;/a&gt; is a ClojureScript wrapper) does things a little differently; it manages two virtual DOMs - one representing the live DOM and one representing the new version of the view you want rendered. It diffs between those two to determine the minimum set of changes to make to the live DOM whenever your app has to re-render.&lt;/p&gt;&lt;p&gt;What this means for interop with non-React code is that we have to opt React out of managing the live DOM for this code, but only once React has created it for us. Once it&apos;s created, we represent to React that nothing about the view changes from state change to state change.&lt;/p&gt;&lt;p&gt;This causes the diff to yield no changes for this particular part of the virtual DOM, which of course means no mutations will occur to the live DOM nodes.&lt;/p&gt;&lt;h2&gt;Getting Ace on the page&lt;/h2&gt;&lt;p&gt;We&apos;re going to go through a working example with Ace. We&apos;ll look at:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;How to instantiate an Ace instance&lt;/li&gt;&lt;li&gt;How to populate the text editor from the Om global app state&lt;/li&gt;&lt;li&gt;How to track the changes occuring in Ace as they happen&lt;/li&gt;&lt;li&gt;And how to persist those changes back to the global Om state&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;We&apos;ll use several life cycle protocol functions to interop with Ace. Here&apos;s a &lt;a href=&quot;https://github.com/swannodette/om/wiki/Documentation#life-cycle-protocols&quot;&gt;full reference of all the protocols in Om&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This code comes with a couple bonuses:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;We&apos;ll see how to use  &lt;a href=&quot;https://clojure.github.io/core.async/&quot;&gt;core.async&lt;/a&gt; to have two Om  components coordinate.&lt;/li&gt;&lt;li&gt;We&apos;ll use the simple but seriously handy &lt;code&gt;defcomponent&lt;/code&gt; from  &lt;a href=&quot;https://github.com/Prismatic/om-tools&quot;&gt;om-tools&lt;/a&gt;, which &lt;accronym title=&quot;Don&apos;t repeat yourself&quot;&gt;DRY&lt;/accronym&gt;s up all the &lt;code&gt;reify IProtocol&lt;/code&gt;   code you see in vanilla Om applications.&lt;/li&gt;&lt;li&gt;Also, we&apos;ll use &lt;a href=&quot;https://github.com/r0man/sablono&quot;&gt;Ŝablono&lt;/a&gt; to  render HTML rather than the &lt;code&gt;om.dom&lt;/code&gt; namespace provided by Om. I  personally find it a lot easier to read and write.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let&apos;s jump in!&lt;/p&gt;&lt;h3&gt;1. Instantiate an Ace instance&lt;/h3&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*ace*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;                              &lt;span class=&quot;c1&quot;&gt;;; 1&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defcomponent&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;editor-area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:div#ace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:style&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:height&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;400px&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}]))&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;;; 2&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;did-mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                                    &lt;span class=&quot;c1&quot;&gt;;; 3&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.edit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;js/ace&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;; 4&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getDOMNode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; 5&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*ace*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;;; 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;First, we set up an &lt;code&gt;atom&lt;/code&gt; to store the reference to Ace so that we   can work with it later on. &lt;strong&gt;Fair warning&lt;/strong&gt;: this does mean you can   only use one instance of this component at a time - yay global   mutable state!&lt;/li&gt;&lt;li&gt;We render a single &lt;code&gt;div&lt;/code&gt; using Ŝablono&apos;s &lt;code&gt;html&lt;/code&gt; macro.&lt;/li&gt;&lt;li&gt;We use the &lt;code&gt;did-mount&lt;/code&gt; (from the &lt;code&gt;IDidMount&lt;/code&gt; protocol), as this is   called once, right after the component has been made live on the DOM.&lt;/li&gt;&lt;li&gt;We invoke Ace&apos;s &lt;code&gt;edit&lt;/code&gt; decorator function, passing it the DOM node   that we get by...&lt;/li&gt;&lt;li&gt;Using React&apos;s &lt;code&gt;getDOMNode&lt;/code&gt; function, passing in &lt;code&gt;owner&lt;/code&gt;, which is   the backing React component provided by Om.&lt;/li&gt;&lt;li&gt;We store the Ace reference in the atom.&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;2. Populate the text editor from the Om global app state&lt;/h3&gt;&lt;p&gt;We&apos;ll do this in two places; once on starting Ace up, and with a separate life cycle protocol function. First, a helper function:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-value!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;deref &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*ace*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                            &lt;span class=&quot;c1&quot;&gt;;; 1&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;cursor&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getCursorPositionScreen&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; 2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.setValue&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-instance&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;;; 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;We get the reference from the atom.&lt;/li&gt;&lt;li&gt;We grab the current text cursor position of the editor...&lt;/li&gt;&lt;li&gt;And pass it back in when setting the new value, so that the cursor   doesn&apos;t jump around, if at all possible - sometimes it will if the   text changes dramatically.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Ok, so now we can set the editor value from the global state, using a key of &lt;code&gt;:value&lt;/code&gt; for this particular state map:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defcomponent&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;editor-area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;did-mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.edit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;js/ace&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getDOMNode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*ace*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-value!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;                  &lt;span class=&quot;c1&quot;&gt;;; 1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;will-update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-value!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;;; 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;Set it on start up from the initial Om cursor.&lt;/li&gt;&lt;li&gt;Use &lt;code&gt;will-update&lt;/code&gt; (from, you guessed it, the &lt;code&gt;IWillUpdate&lt;/code&gt;   protocol) to set the data from the incoming state transition cursor.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Great! We have an editor on the page!&lt;/p&gt;&lt;h2&gt;3. Track the changes in Ace&lt;/h2&gt;&lt;p&gt;Now we&apos;ll use Ace&apos;s on change callback to catch changes as they happen.&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;change-handler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;                             &lt;span class=&quot;c1&quot;&gt;;; 1&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;???&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defcomponent&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;editor-area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;did-mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.edit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;js/ace&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getDOMNode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*ace*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.. &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-session&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;getSession&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;change&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;change-handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;; 2&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-value!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;Create a change handler function.&lt;/li&gt;&lt;li&gt;Here we&apos;re using Clojure&apos;s nifty &lt;code&gt;..&lt;/code&gt; interop convenience - here&apos;s the   &lt;a href=&quot;http://grimoire.arrdem.com/1.6.0/clojure.core/DOT__DOT/&quot;&gt;reference on Grimoire&lt;/a&gt;   for that.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Ok, but what do we put into that change handler?&lt;/p&gt;&lt;hr /&gt;&lt;h4&gt;Interlude&lt;/h4&gt;&lt;p&gt;At this point, we &lt;em&gt;could&lt;/em&gt; simply write the changes right back into the global app state, but there&apos;s a problem with this approach.&lt;/p&gt;&lt;p&gt;Doing so will cause that &lt;code&gt;will-update&lt;/code&gt; function to run, which will unnecessarily update Ace to the value it already has. Remember, React isn&apos;t managing this DOM node - there&apos;s no fancy diffing to save extraneous work!&lt;/p&gt;&lt;p&gt;Instead, we&apos;ll use &lt;a href=&quot;https://github.com/swannodette/om/blob/master/CHANGES.md#071&quot;&gt;Om 0.7.1&lt;/a&gt;&apos;s new experimental &lt;code&gt;set-state-nr!&lt;/code&gt; function to keep track of the changes without triggering a re-render, and provide a Save button for the user to click when they want their changes committed.&lt;/p&gt;&lt;p&gt;That way, we have the editor value available immediately, but only commit it when the user wants it. Why might we want it immediately? Well, we might decide to provide a real-time preview or validation capability!&lt;/p&gt;&lt;p&gt;We also need another component to compose the Save button and the editor we&apos;ve just built, as we can&apos;t add any more UI to this component thanks to the way we&apos;re opting out React rendering.&lt;/p&gt;&lt;p&gt;Because of this, we&apos;ll need to coordinate between the container and editor components when the user clicks Save, so that the editor can transfer the editor value from local to global state.&lt;/p&gt;&lt;p&gt;That&apos;s where the core.async comes in.&lt;/p&gt;&lt;hr /&gt;&lt;h2&gt;3. Track the changes in Ace - round two&lt;/h2&gt;&lt;p&gt;Right. Let&apos;s get the value from Ace into local state:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;change-handler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;om/set-state-nr!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:edited-value&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;;; 1&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;deref &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*ace*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;;; 2&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defcomponent&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;editor-area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;did-mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-instance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.edit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;js/ace&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.getDOMNode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reset!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*ace*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.. &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-instance&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;getSession&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;change&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;change-handler&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;;; 3&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-value!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;Our handler writes an &lt;code&gt;:edited-value&lt;/code&gt; to the component&apos;s local   state via &lt;code&gt;owner&lt;/code&gt;...&lt;/li&gt;&lt;li&gt;Using the value from the Ace instance.&lt;/li&gt;&lt;li&gt;We make sure to update the event listener to pass in &lt;code&gt;owner&lt;/code&gt;.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Now we have the whole interop round-trip working - the text value going into Ace and back out again.&lt;/p&gt;&lt;p&gt;Let&apos;s put that container together:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defcomponent&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init-state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:editor-chan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;;; 1&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render-state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:keys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;editor-chan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}]&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;;; 2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;html&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:div&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:onClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;editor-chan&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:save!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Save&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; 3&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;editor-area data                                    ;; 4&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:init-state&lt;/span&gt;                            &lt;span class=&quot;c1&quot;&gt;;; 5&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:editor-chan&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;editor-chan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}})])))&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;;; 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&apos;s quite a bit going on here:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;We use the &lt;code&gt;init-state&lt;/code&gt; function (yep, from the &lt;code&gt;IInitState&lt;/code&gt;   protocol) to create a new async channel. It&apos;s important to do this   inside the right life cycle function, as we only want it to be created   once.&lt;/li&gt;&lt;li&gt;We use the &lt;code&gt;render-state&lt;/code&gt; function (you&apos;re right, from the   &lt;code&gt;IRenderState&lt;/code&gt; protocol), which is simply the &lt;code&gt;IRender&lt;/code&gt; protocol   with a convenient way to get at the local state baked in; as a function   argument. Thanks to that, we destructure the channel out.&lt;/li&gt;&lt;li&gt;We have our mighty Save button, which simply writes the keyword &lt;code&gt;:save!&lt;/code&gt; to   the channel every time it is clicked.&lt;/li&gt;&lt;li&gt;We instantiate our &lt;code&gt;editor-area&lt;/code&gt; component, using om-tools&apos;   shorthand &lt;br /&gt;&lt;code&gt;-&amp;gt;component&lt;/code&gt; syntax, which boils down to &quot;&lt;code&gt;om/build component&lt;/code&gt;&quot;.&lt;/li&gt;&lt;li&gt;We pass an initial state for our editor using   &lt;a href=&quot;https://github.com/swannodette/om/wiki/Documentation#build&quot;&gt;om/build&lt;/a&gt;&apos;s   third argument. This will become available as local state inside   &lt;code&gt;editor-area&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;And that state is simply a map with the channel we created at 1.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Ok. Now we have the appropriate signalling in place to know when to transfer the value from local to global state.&lt;/p&gt;&lt;p&gt;Now, inside &lt;code&gt;editor-area&lt;/code&gt;, we just need to respond to that signal:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defcomponent&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;editor-area&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;will-mount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;                                          &lt;span class=&quot;c1&quot;&gt;;; 1&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;editor-chan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;om/get-state&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:editor-chan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;;; 2&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;go&lt;/span&gt;                                                  &lt;span class=&quot;c1&quot;&gt;;; 3&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;                                        &lt;span class=&quot;c1&quot;&gt;;; 4&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:save!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;! editor-chan))                ;; 5&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when-let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;edited-value&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;om/get-state&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:edited-value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; 6&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;om/update!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:value&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;edited-value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;;; 7&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;Set everything up in the &lt;code&gt;will-mount&lt;/code&gt; function (from the   &lt;code&gt;IWillMount&lt;/code&gt; protocol, of course). We could do this in &lt;code&gt;did-mount&lt;/code&gt;,   too, but now you&apos;re aware that &lt;code&gt;will-mount&lt;/code&gt; exists :-)&lt;/li&gt;&lt;li&gt;Grab the channel from local state.&lt;/li&gt;&lt;li&gt;Start a core.async &lt;code&gt;go&lt;/code&gt; block, which allows us to write   synchronous-looking but-actually-asynchronous code.&lt;/li&gt;&lt;li&gt;Loop endlessly, so that we can catch each successive channel value.&lt;/li&gt;&lt;li&gt;Using &lt;code&gt;&amp;lt;!&lt;/code&gt;, block until there&apos;s a value on the channel, and if that   value is &lt;code&gt;:save!&lt;/code&gt;...&lt;/li&gt;&lt;li&gt;Try to get the edited value from local state...&lt;/li&gt;&lt;li&gt;And if it&apos;s there, use &lt;code&gt;om/update!&lt;/code&gt; to place it in the global state map.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Phew! Now we have everything wired up.&lt;/p&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Here&apos;s the full source, again:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/robert-stuttaford/om-ace-demo/blob/master/src/om_ace_demo.cljs#L1&quot;&gt;https://github.com/robert-stuttaford/om-ace-demo&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We have covered quite a lot ground in just ±50 lines of code:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;We got a mutable non-React Javascript library to live in harmony with an  Om/React app, which showed us Javascript interop syntax and several Om life  cycle protocols in action.&lt;/li&gt;&lt;li&gt;We used core.async to coordinate between two components, thus avoiding  callbacks between them.&lt;/li&gt;&lt;li&gt;We saw how om-tools and Ŝablono look when used with Om, which is  mostly a feel-good thing, I believe it helps a lot in the long run.&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Special thanks&lt;/h2&gt;&lt;p&gt;To &lt;a href=&quot;https://twitter.com/levanderhart&quot;&gt;Luke VanderHart&lt;/a&gt; for the conversation that led me to this insight.&lt;/p&gt;</content></entry><entry><title>Configuration in Om apps</title><link href="http://www.stuttaford.me/2014/08/07/configuration-in-om-apps/" /><updated>2014-08-23T12:53:16Z</updated><id>http://www.stuttaford.me/2014/08/07/configuration-in-om-apps/</id><content type="html">&lt;p&gt;I&apos;ve found a nice and simple way for making configuration available to all components in a ClojureScript &lt;a href=&quot;https://github.com/swannodette/om&quot;&gt;Om&lt;/a&gt; application.&lt;/p&gt;&lt;p&gt;As long as you have a React component reference, typically named &lt;code&gt;owner&lt;/code&gt; in Om, you can use this pattern.&lt;/p&gt;&lt;p&gt;The code that follows assumes a &lt;code&gt;:config&lt;/code&gt; key in the root of your state map, and it assumes that the value for that key is also a map.&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:media-path&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/images/content/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;ss&quot;&gt;:header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:logo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;avengers-logo.jpg&quot;&lt;/span&gt;
                  &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The Avengers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given that, we bootstrap the Om application:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;om/root&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:target&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;. &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;js/document&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getElementById&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;:shared&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see on the last line, we put &lt;code&gt;:config&lt;/code&gt; into the &lt;code&gt;:shared&lt;/code&gt; state facility that Om provides, which is available to all components from this &lt;code&gt;om/root&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Of course, it&apos;s still available directly to the root component, as well, but now we&apos;ll have a consistent way to reach config from anywhere.&lt;/p&gt;&lt;p&gt;To access the config from within any component, however deeply nested, we use &lt;code&gt;om/get-shared&lt;/code&gt;:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reify&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IRender&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;om/get-shared&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/div&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:src&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:media-path&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:logo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))})&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/h1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&apos;s important to point out that the &lt;code&gt;:shared&lt;/code&gt; state can only be set once at &lt;code&gt;om/root&lt;/code&gt;, so it&apos;s not meant as a global mutable state - we have &lt;code&gt;atom&lt;/code&gt; for that :-)&lt;/p&gt;&lt;p&gt;At this point, we&apos;re good. We have configuration data anywhere we need it. We can go one step further, though, and provide a simpler abstraction for the rest of our app to use:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;config&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;om/get-shared&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When called with just the owner, you&apos;ll get the whole config map back. This is great when you need access to several keys and want to destructure them out. When called with the owner and a key, it returns whatever value that key has.&lt;/p&gt;&lt;p&gt;Using this function also ensures that you have an empty map to work with just in case you don&apos;t have &lt;code&gt;:config&lt;/code&gt; in your shared state.&lt;/p&gt;&lt;p&gt;Now that we have that, what does our header component look like?&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reify&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IRender&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/div&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:src&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:media-path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:logo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))})&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/h1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&apos;s a fair bit simpler to read than before. It&apos;s not &lt;em&gt;that&lt;/em&gt; much cleaner, but when you have many components, the savings add up!&lt;/p&gt;&lt;p&gt;Here&apos;s the full runnable source:&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;ns &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;configuration-pattern&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:require&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;om.core&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;om&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:include-macros&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;om.dom&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dom&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:include-macros&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;config&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;or &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;om/get-shared&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:media-path&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/images/content/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;ss&quot;&gt;:header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:logo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;avengers-logo.jpg&quot;&lt;/span&gt;
                  &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The Avengers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; without config helper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reify&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IRender&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;om/get-shared&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/div&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:src&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:media-path&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:logo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))})&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/h1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; with config helper&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reify&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IRender&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/div&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:src&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:media-path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:logo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))})&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dom/h1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reify&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IRender&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;om/build&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:header&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;om/root&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:target&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;. &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;js/document&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getElementById&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;:shared&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And there you have it. One less thing to worry about!&lt;/p&gt;</content></entry><entry><title>Welcome!</title><link href="http://www.stuttaford.me/2014/08/04/welcome/" /><updated>2014-08-07T18:52:51Z</updated><id>http://www.stuttaford.me/2014/08/04/welcome/</id><content type="html">&lt;p&gt;Howdy, internet traveller!&lt;/p&gt;&lt;p&gt;Here I hope to share some of my experiences working with the Clojure stack when building the Cognician platform.&lt;/p&gt;&lt;p&gt;Topics will include technologies such as:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&apos;http://clojure.org&apos;&gt;Clojure&lt;/a&gt; itself&lt;/li&gt;&lt;li&gt;&lt;a href=&apos;https://github.com/clojure/clojurescript&apos;&gt;ClojureScript&lt;/a&gt;, the Javascript variant&lt;/li&gt;&lt;li&gt;&lt;a href=&apos;http://leiningen.org&apos;&gt;Leiningen&lt;/a&gt;, the build tool for Clojure&lt;/li&gt;&lt;li&gt;&lt;a href=&apos;http://www.datomic.com/&apos;&gt;Datomic&lt;/a&gt;, an immutable database built with Clojure&lt;/li&gt;&lt;li&gt;&lt;a href=&apos;https://github.com/swannodette/om&apos;&gt;Om&lt;/a&gt;, a ClojureScript wrapper for Facebook&apos;s React Javascript library&lt;/li&gt;&lt;li&gt;&lt;a href=&apos;https://github.com/clojure/core.async/&apos;&gt;Core.async&lt;/a&gt;, a Clojure library for coordinating sequential processes in Clojure programs&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;And plenty more!&lt;/p&gt;&lt;p&gt;At &lt;a href=&apos;https://www.cognician.com&apos;&gt;Cognician&lt;/a&gt;, we built our second generation SaaS application stack wholly with Clojure, using all of the above and many more. Having done this stuff &apos;for real&apos; for a couple years, I have many stories, tips, and how-tos to share.&lt;/p&gt;&lt;p&gt;Of course, all of this stuff is my opinion, and the opinions of those who I&apos;ve chosen to agree with -- which brings us to the very important point that most of what I have to share, I learned from someone else in the community. I stand on the shoulders of giants :-)&lt;/p&gt;&lt;p&gt;Let&apos;s see where this goes!&lt;/p&gt;</content></entry></feed>