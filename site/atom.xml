<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Robert Stuttaford</title><link href="http://www.stuttaford.me/atom.xml" rel="self" /><link href="http://www.stuttaford.me/" /><updated>2018-03-14T09:41:27Z</updated><id>http://www.stuttaford.me</id><author><name>Robert Stuttaford</name><email>robert@stuttaford.me</email></author><entry><title>Bridge dev diary: Datomic mode</title><link href="http://www.stuttaford.me/2018/03/03/bridge-dev-diary--datomic-mode/" /><updated>2018-03-14T09:41:27Z</updated><id>http://www.stuttaford.me/2018/03/03/bridge-dev-diary--datomic-mode/</id><content type="html">&lt;p&gt;This is a development diary for the &lt;code&gt;bridge&lt;/code&gt; project I&apos;m working on, described in detail in my post:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2018/02/18/a-clojure-learning-journey/&quot;&gt;A Clojure learning journey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This diary entry covers the &lt;a href=&quot;https://github.com/robert-stuttaford/bridge/compare/a7ae33baa9aed47d39882b635b2b0ede4dcac5d9...be515cdcc591b2a5b0123c871f41d7a7e74b880a&quot;&gt;changes in this diff&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;datomic-peer-vs-datomic-client&quot;&gt;Datomic Peer vs Datomic Client&lt;/h2&gt;
&lt;p&gt;Although I&apos;m planning for the app to use Datomic Peer in production, as a learning exercise, I&apos;ve decided to implement the Datomic layer with both the Peer and the Client at the same time.&lt;/p&gt;
&lt;p&gt;This&apos;ll serve to highlight the differences between the two (or non-differences), and allow us to explore some ways in which Clojure supports abstractions like this.&lt;/p&gt;
&lt;p&gt;In practice, you&apos;ll switch between these with a &lt;a href=&quot;https://github.com/robert-stuttaford/bridge/blob/be515cdcc591b2a5b0123c871f41d7a7e74b880a/resources/system.edn#L2&quot;&gt;single configuration setting&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, this assumes that the respective transactor and peer-server processes are running.&lt;/p&gt;
&lt;h3 id=&quot;caveat-toolsdepsalpha-and-datomic-pro-peer&quot;&gt;Caveat: tools.deps.alpha and Datomic Pro Peer&lt;/h3&gt;
&lt;p&gt;It&apos;s not possible to use the Datomic Pro Peer library with &lt;code&gt;deps.edn&lt;/code&gt;  at the moment, because &lt;a href=&quot;https://github.com/clojure/tools.deps.alpha&quot;&gt;tools.deps.alpha&lt;/a&gt; doesn&apos;t currently support Maven authentication.&lt;/p&gt;
&lt;p&gt;It&apos;s being worked on; see &lt;a href=&quot;https://dev.clojure.org/jira/browse/TDEPS-9&quot;&gt;the relevant Jira ticket here&lt;/a&gt; — please vote for it :-)&lt;/p&gt;
&lt;p&gt;Because of this, we can&apos;t use Datomic Pro in Peer mode. This doesn&apos;t matter for the moment, because my initial development will happen with an in-memory database, but when the time comes to use storage, we&apos;ll have to use the &lt;code&gt;datomic:free://&lt;/code&gt; Datomic URI modality.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;code-changes&quot;&gt;Code changes&lt;/h2&gt;
&lt;h3 id=&quot;datomic-integrant-implementation-update&quot;&gt;Datomic Integrant implementation update&lt;/h3&gt;
&lt;p&gt;As described earlier, we now support both Peer and Client.&lt;/p&gt;
&lt;p&gt;Our Integrant &lt;a href=&quot;https://github.com/robert-stuttaford/bridge/blob/be515cdcc591b2a5b0123c871f41d7a7e74b880a/resources/system.edn&quot;&gt;system map&lt;/a&gt; now includes configuration for both modes.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/robert-stuttaford/bridge/blob/be515cdcc591b2a5b0123c871f41d7a7e74b880a/src/bridge/data/datomic.clj#L6-L22&quot;&gt;Datomic implementation&lt;/a&gt; now returns a map with two or three keys:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;{:datomic/mode   :peer | :client
 :datomic/conn   ...
 :datomic/client ...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, the &lt;code&gt;:datomic/client&lt;/code&gt; is only present if we&apos;re using that mode.&lt;/p&gt;
&lt;p&gt;Then, the Ring middleware merges this map, plus a Datomic database value at &lt;code&gt;:datomic/db&lt;/code&gt;, into the request map, for our handlers to use as needed.&lt;/p&gt;
&lt;p&gt;It&apos;s going to be interesting to see how dealing with both APIs at once turns out. Even if it results in code that I wouldn&apos;t be happy with in a &amp;quot;serious&amp;quot; production setting (which may not even happen!), I think it&apos;s worth trying, as a way to directly confront the API differences head on.&lt;/p&gt;
&lt;h3 id=&quot;explicit-environment-variables&quot;&gt;Explicit environment variables&lt;/h3&gt;
&lt;p&gt;I moved the environment defaults from &lt;a href=&quot;https://github.com/robert-stuttaford/bridge/blob/be515cdcc591b2a5b0123c871f41d7a7e74b880a/resources/system.edn&quot;&gt;system.edn&lt;/a&gt; to its own file &lt;a href=&quot;https://github.com/robert-stuttaford/bridge/blob/be515cdcc591b2a5b0123c871f41d7a7e74b880a/bridge.env&quot;&gt;bridge.env&lt;/a&gt;, so that they can be used outside of Clojure processes (e.g. when running the peer-server).&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/robert-stuttaford/bridge/blob/be515cdcc591b2a5b0123c871f41d7a7e74b880a/Makefile&quot;&gt;makefile&lt;/a&gt; sources this file before running any Clojure processes that require it.&lt;/p&gt;
&lt;h3 id=&quot;datomic-transactor--peer-server-helper-scripts&quot;&gt;Datomic transactor / peer server helper scripts&lt;/h3&gt;
&lt;p&gt;If you&apos;re new to Datomic, I&apos;ve provided some &lt;a href=&quot;https://github.com/robert-stuttaford/bridge/tree/be515cdcc591b2a5b0123c871f41d7a7e74b880a/script&quot;&gt;bash scripts&lt;/a&gt; to ease you into it:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;install-datomic-free.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Does what it says on the tin!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;install-datomic-pro.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you decide to use the Datomic Client option, you&apos;ll need to use Datomic Pro, which you can get for free via &lt;a href=&quot;https://my.datomic.com/account/create&quot;&gt;Datomic Pro Starter&lt;/a&gt;. Once registered, you&apos;ll put your credentials into this script and it&apos;ll take care of the rest for you.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;datomic-transactor.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Run your Datomic transactor, which works whether you decide to use Free or Pro.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;datomic-peer-server.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Again, if you decide to use the Datomic Client option, you&apos;ll run the peer-server alongside your transactor.&lt;/p&gt;
&lt;h3 id=&quot;new-debug-page&quot;&gt;New debug page&lt;/h3&gt;
&lt;p&gt;I added a &lt;code&gt;/system&lt;/code&gt; page which prints out the fully realised Integrant system configuration, as well as the Ring request.&lt;/p&gt;
&lt;p&gt;This&apos;ll be useful for debugging both Integrant system issues as well as Ring middleware, particularly as we work on the user authentication and authorisation stuff.&lt;/p&gt;
&lt;h3 id=&quot;dependency-updates&quot;&gt;Dependency updates&lt;/h3&gt;
&lt;p&gt;One disadvantage of using &lt;code&gt;:git/url&lt;/code&gt; and &lt;code&gt;:sha&lt;/code&gt; with &lt;code&gt;deps.edn&lt;/code&gt; is that it puts all of the source from these dependencies on your classpath — which means that &lt;code&gt;tools.namespace&lt;/code&gt; includes it in the &lt;code&gt;refresh&lt;/code&gt; cycle. It&apos;s merely an annoyance, that goes away after your first &lt;code&gt;refresh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even so, it&apos;s nice that we can now use the freshly minted &lt;a href=&quot;https://github.com/clojure/clojurescript/releases/tag/r1.10.64&quot;&gt;ClojureScript 1.10.64&lt;/a&gt; release. You can watch an awesome livecast about some of the changes in this release here: &lt;a href=&quot;https://www.youtube.com/watch?v=KG9uFtXaqYg&quot;&gt;Apropos Episode 1&lt;/a&gt; — follow &lt;a href=&quot;https://twitter.com/apropos_cast&quot;&gt;Apropos&lt;/a&gt; account on Twitter to learn when the next episode is!&lt;/p&gt;
&lt;p&gt;I&apos;m really excited about the potential of &lt;code&gt;cljs.main&lt;/code&gt;!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;That&apos;s it for now.&lt;/p&gt;
&lt;p&gt;Keep an eye on my Twitter account, where I&apos;ll be posting my live-stream schedule soon!&lt;/p&gt;
&lt;p&gt;Thanks for reading, and feel free to &lt;a href=&quot;/&quot;&gt;reach out any time&lt;/a&gt; if you have thoughts or questions to share.&lt;/p&gt;
</content></entry><entry><title>A Clojure learning journey</title><link href="http://www.stuttaford.me/2018/02/18/a-clojure-learning-journey/" /><updated>2018-02-19T14:45:05Z</updated><id>http://www.stuttaford.me/2018/02/18/a-clojure-learning-journey/</id><content type="html">&lt;p&gt;A year or two ago, I gave up trying to track all the interesting stuff happening in the Clojure universe, because the rate of change was simply too high — too many awesome new things were happening too frequently for me to be able to try them all out, or find a &amp;quot;nail to hammer&amp;quot; with whichever new interesting thing came out that week.&lt;/p&gt;
&lt;p&gt;That, combined with the fact that everything we were doing &amp;quot;in anger&amp;quot; was working just fine, led me to a sort of complacence, where I didn&apos;t try new things out.&lt;/p&gt;
&lt;p&gt;That changes today!&lt;/p&gt;
&lt;p&gt;I&apos;ve decided to give myself a multi-faceted learning / sharing goal, and this post serves to document what it is, and why I&apos;m doing it.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;what-do-you-need&quot;&gt;What do you need?&lt;/h2&gt;
&lt;p&gt;Around 3-4 weeks ago, I wrote to the Internet:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;What would you like to see discussed and dissected about &lt;a href=&quot;https://twitter.com/hashtag/Datomic?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Datomic&lt;/a&gt;? Please RT :-)&lt;/p&gt;&amp;mdash; Robert Stuttaford (@RobStuttaford) &lt;a href=&quot;https://twitter.com/RobStuttaford/status/956407817245724677?ref_src=twsrc%5Etfw&quot;&gt;January 25, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;And again, around ten days ago:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I want to build an open-source project with &lt;a href=&quot;https://twitter.com/hashtag/Clojure?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Clojure&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/hashtag/ClojureScript?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#ClojureScript&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/hashtag/Datomic?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#Datomic&lt;/a&gt; Cloud, to demonstrate (via screencasts) how it could be done.&lt;br&gt;&lt;br&gt;I&amp;#39;m undecided on what to build... I&amp;#39;m pretty sure the world can do without another todo list, blog engine, or Twitter clone. &lt;br&gt;&lt;br&gt;Anyone?&lt;/p&gt;&amp;mdash; Robert Stuttaford (@RobStuttaford) &lt;a href=&quot;https://twitter.com/RobStuttaford/status/961668361246728193?ref_src=twsrc%5Etfw&quot;&gt;February 8, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;The feedback I received is clear: there&apos;s interest in seeing how Datomic and Clojure can be used to create real value.&lt;/p&gt;
&lt;p&gt;I got some really interesting replies to that second question. In between the totally reasonable suggestions of cloning a blog engine, or Jira, or Slack, or a shopping cart, or a certain orange news site, these stood out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A community-driven events wiki, with an example use-case: &amp;quot;e.g, notify me of upcoming metal shows occurring within a 20 minute drive.&amp;quot; Knowing &lt;a href=&quot;https://twitter.com/levanderhart&quot;&gt;Luke&lt;/a&gt;, that&apos;s the sort of metal you can find on iTunes Music, not the sort you search on the beach for with a detector.&lt;/li&gt;
&lt;li&gt;A registration system for &lt;a href=&quot;http://www.clojurebridge.org/&quot;&gt;ClojureBridge&lt;/a&gt;, particularly the &lt;a href=&quot;http://clojurebridge-berlin.org/&quot;&gt;ClojureBridge Berlin&lt;/a&gt; chapter.&lt;/li&gt;
&lt;li&gt;An accounting system. Seems like a slam-dunk for Datomic .. that&apos;s because it is —  this has already been done! Check it out: &lt;a href=&quot;https://github.com/juxt/juxt-accounting&quot;&gt;https://github.com/juxt/juxt-accounting&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A large scale Datomic &lt;a href=&quot;https://github.com/Datomic/codeq&quot;&gt;codeq&lt;/a&gt;. Public global repository with a bunch of Clojure functions. I kinda feel like this has already been solidly tackled by &lt;a href=&quot;https://crossclj.info/&quot;&gt;https://crossclj.info/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some sort of free-for-devs version of &lt;a href=&quot;https://nextjournal.com/&quot;&gt;https://nextjournal.com/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A multi-player code editor.&lt;/li&gt;
&lt;li&gt;A multi-player game.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That last one is verrrry tempting. I actually did start something like this with the Cape Town Clojure user group, along with &lt;a href=&quot;https://twitter.com/cmdrdats&quot;&gt;@cmdrdats&lt;/a&gt; : &lt;a href=&quot;https://github.com/cape-town-clojure/steel-plains-tcg&quot;&gt;Steel Plains TCG&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I built a &lt;a href=&quot;https://github.com/cape-town-clojure/steel-plains-tcg/blob/master/src/cljs/sptcg/deck_builder.cljs&quot;&gt;deck builder with Om&lt;/a&gt;, and &lt;a href=&quot;https://github.com/cape-town-clojure/steel-plains-tcg/blob/master/src/cljx/sptcg/card_schema.cljx&quot;&gt;specified the card and deck model with Schema&lt;/a&gt; — remember those? :-) As with many projects like this, we didn&apos;t get very far, but it was tremendous fun.&lt;/p&gt;
&lt;p&gt;While I appreciated all the responses I got, the one that seemed like a clear win is the one for ClojureBridge, because not only does it have enough meat on the bone for demonstrating how to build this stuff, it has something that&apos;s key for motivating me: it&apos;ll actually be used, by real people, to solve a real challenge they have.&lt;/p&gt;
&lt;p&gt;So the two &amp;quot;Whys&amp;quot; here are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build it in the open, where folks can learn from watching me do it (and I can learn from the feedback I get).&lt;/li&gt;
&lt;li&gt;Build something that&apos;s actually useful to someone.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So that&apos;s what I&apos;m going to do!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;clojurebridge-registration-system&quot;&gt;ClojureBridge registration system&lt;/h2&gt;
&lt;p&gt;This is such a nice project for me, for a number of reasons.&lt;/p&gt;
&lt;h3 id=&quot;collaboration&quot;&gt;Collaboration&lt;/h3&gt;
&lt;p&gt;I have come to learn that I work best when I have someone to work with. This is one of the reasons why I consult — I get to interact with another human being, and learn from them, and provide them with value.&lt;/p&gt;
&lt;p&gt;Happily, for this project, I have someone I can talk to, to understand requirements, and verify that what I&apos;m building actually solves the problem. Crucially, that person — &lt;a href=&quot;https://twitter.com/plexus&quot;&gt;Arne Brasseur&lt;/a&gt;, of &lt;a href=&quot;https://lambdaisland.com/p/about&quot;&gt;Lambda Island&lt;/a&gt; and &lt;a href=&quot;https://clojureverse.org/&quot;&gt;ClojureVerse&lt;/a&gt; fame — is willing and able. Thanks, Arne! I truly appreciate it.&lt;/p&gt;
&lt;h3 id=&quot;not-just-a-toy-project&quot;&gt;Not just a toy project&lt;/h3&gt;
&lt;p&gt;I haven&apos;t ever attended a ClojureBridge event, mostly due to where I live, which makes me a little sad. So, this gives me my own way to participate somehow.&lt;/p&gt;
&lt;p&gt;If I succeed, I&apos;ll provide something that&apos;s useful in organising volunteer-driven work that grows our community in a very necessary and healthy way.&lt;/p&gt;
&lt;p&gt;That feels good!&lt;/p&gt;
&lt;h3 id=&quot;clear-goal&quot;&gt;Clear goal&lt;/h3&gt;
&lt;p&gt;Because of the first two points above, I have clarity on what to build, and why it&apos;ll work. This is thanks largely to the &lt;a href=&quot;https://github.com/robert-stuttaford/bridge/blob/master/doc/requirements.md&quot;&gt;excellent write-up that Arne provided&lt;/a&gt;, which describes what they need, and why.&lt;/p&gt;
&lt;h3 id=&quot;its-full-featured&quot;&gt;It&apos;s full-featured&lt;/h3&gt;
&lt;p&gt;In hammock mode, I wrote up a &lt;a href=&quot;https://github.com/robert-stuttaford/bridge/blob/master/doc/system.md#views-and-verbs-by-capability-and-role&quot;&gt;list of capabilities, roles, verbs and views&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some highlights:&lt;/p&gt;
&lt;h4 id=&quot;user-management&quot;&gt;User management&lt;/h4&gt;
&lt;p&gt;There&apos;s no avoiding it. Systems that matter need to interact with human beings. We have to model them in our system, and provide safe ways for them to do their part to move things forward.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authentication and authorisation (role-based and content-based).&lt;/li&gt;
&lt;li&gt;Profile management: self-service registration and account recovery, data protection and privacy concerns.&lt;/li&gt;
&lt;li&gt;Audit trail: who did what? Who altered this thing?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;event-management&quot;&gt;Event management&lt;/h4&gt;
&lt;p&gt;The heart of the application.&lt;/p&gt;
&lt;p&gt;Interesting, because events are anchored in time, which means that time is a first class aspect of the system&apos;s behaviour:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What you can see and do changes as time passes.&lt;/li&gt;
&lt;li&gt;Some things need to happen automatically at a predetermined time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a handful of interesting event manangement features to build:&lt;/p&gt;
&lt;h5 id=&quot;content-management&quot;&gt;Content management&lt;/h5&gt;
&lt;p&gt;There are two content management pieces here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The events themselves — scheduling, detailing, and managing the status of events and the individuals involved.&lt;/li&gt;
&lt;li&gt;Email templates. Much of the work of organising such an event is clear communication, and, given the fact that this whole effort is focused on helping to establish a new narrative for women in tech — the words &lt;strong&gt;really&lt;/strong&gt; matter. So, removing the friction around sending the right words at the right time is important.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;invite-process&quot;&gt;Invite process&lt;/h5&gt;
&lt;p&gt;There&apos;s a cyclical, multi-person interaction when handling the invite process. Arne would like the app to make it &lt;a href=&quot;https://github.com/robert-stuttaford/bridge/blob/master/doc/requirements.md#self-service-acceptdecline&quot;&gt;totally self-service&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&quot;reporting&quot;&gt;Reporting&lt;/h5&gt;
&lt;p&gt;Ah, good old reporting. Organisers need to be able to quickly determine head-counts for things like t-shirt sizes, catering choices, child-care, and so on.&lt;/p&gt;
&lt;p&gt;More friction to remove!&lt;/p&gt;
&lt;h5 id=&quot;learning-groups&quot;&gt;Learning groups&lt;/h5&gt;
&lt;p&gt;Another interesting bit is how participants are grouped during a live ClojureBridge event. Several factors play a part: who&apos;s actually available, language preference, prior experience, coaching preference — all of this matters.&lt;/p&gt;
&lt;p&gt;It&apos;ll be interesting to see how we might solve this algorithmically.&lt;/p&gt;
&lt;p&gt;Perhaps it&apos;ll give me a strong enough impetus to understand &lt;a href=&quot;https://github.com/clojure/core.logic&quot;&gt;core.logic&lt;/a&gt; enough to solve an actual challenge?&lt;/p&gt;
&lt;p&gt;This does feel a bit like planning who sits next to whom at a wedding :-)&lt;/p&gt;
&lt;h4 id=&quot;chapter-management&quot;&gt;Chapter management&lt;/h4&gt;
&lt;p&gt;If things go as well as I hope, I&apos;d like to see this system used by ClojureBridge around the world, not just the chapter in Berlin. That means that there&apos;ll be an additional layer beyond users and events, where we control who organises which chapter, adding new chapters, and so forth.&lt;/p&gt;
&lt;p&gt;A personal goal (one I acknowledge may not be possible, because it&apos;s not actually up to me) is that this system lives on the main &lt;a href=&quot;http://www.clojurebridge.org&quot;&gt;ClojureBridge&lt;/a&gt; site somehow.&lt;/p&gt;
&lt;p&gt;I suppose am in control of one thing; I can ensure that I make this as useful as possible!&lt;/p&gt;
&lt;p&gt;Perhaps when the time is right, I&apos;ll be able to make a strong case for having this system facilitate all the ClojureBridge events around the world.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;its-full-stack&quot;&gt;It&apos;s full stack&lt;/h3&gt;
&lt;p&gt;That I&apos;ll be using Clojure 1.9, ClojureScript, and Datomic are &lt;em&gt;quite&lt;/em&gt; obvious :-)&lt;/p&gt;
&lt;h4 id=&quot;rich-user-experience&quot;&gt;Rich user experience&lt;/h4&gt;
&lt;p&gt;There&apos;s loads of things to build into a single-page app backed by an EDN API, but also a fair amount of simple server-rendered pages. We&apos;ll be able to see both approaches working in unison.&lt;/p&gt;
&lt;h4 id=&quot;no-leiningen&quot;&gt;No Leiningen&lt;/h4&gt;
&lt;p&gt;Since the release of Clojure 1.9, &lt;a href=&quot;https://clojure.org/guides/deps_and_cli&quot;&gt;Clojure ships with its own cli tool&lt;/a&gt;. As I&apos;ve been happily ensconced in my fortress of &lt;code&gt;project.clj&lt;/code&gt; files these past six years, I&apos;ve had no reason to get to grips with this tool, or any of its implications.&lt;/p&gt;
&lt;p&gt;I&apos;ve decided to apply a simple forcing function for this project: do it with &lt;code&gt;clojure&lt;/code&gt; and &lt;a href=&quot;https://clojure.org/reference/deps_and_cli&quot;&gt;tools.deps.alpha&lt;/a&gt; / &lt;code&gt;deps.edn&lt;/code&gt; alone — no Leiningen!&lt;/p&gt;
&lt;h4 id=&quot;libraries-ive-had-an-itch-to-try-out&quot;&gt;Libraries I&apos;ve had an itch to try out&lt;/h4&gt;
&lt;p&gt;I&apos;ve long been a fan of &lt;a href=&quot;https://twitter.com/stuartsierra&quot;&gt;Stuart Sierra&lt;/a&gt;&apos;s &lt;a href=&quot;http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded&quot;&gt;Reloaded workflow&lt;/a&gt;, as I am sure many Clojurians (Clojurists? Clojurologists? Clojuronimoes?) are.&lt;/p&gt;
&lt;p&gt;Having used &lt;a href=&quot;http://github.com/stuartsierra/component&quot;&gt;Component&lt;/a&gt; and &lt;a href=&quot;https://github.com/puppetlabs/trapperkeeper&quot;&gt;TrapperKeeper&lt;/a&gt; thus far, I&apos;ve been aware of several other takes on this, such as &lt;a href=&quot;https://twitter.com/danielszmu&quot;&gt;Daniel Szmulewicz&lt;/a&gt;&apos; &lt;a href=&quot;https://github.com/danielsz/system&quot;&gt;System&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/weavejester&quot;&gt;James Reeves&lt;/a&gt;&apos; &lt;a href=&quot;https://github.com/weavejester/integrant&quot;&gt;Integrant&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to give Integrant and &lt;a href=&quot;https://github.com/weavejester/ataraxy&quot;&gt;Ataraxy&lt;/a&gt; (also by James) a try. I like their design, and I just love saying their names.&lt;/p&gt;
&lt;p&gt;Makes me feel a little like I&apos;m living in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Culture_series&quot;&gt;Culture novel&lt;/a&gt; :-)&lt;/p&gt;
&lt;h4 id=&quot;datomic-on-prem-vs-datomic-cloud&quot;&gt;Datomic On-Prem vs Datomic Cloud&lt;/h4&gt;
&lt;p&gt;I did intend on using &lt;a href=&quot;https://www.datomic.com/&quot;&gt;Datomic Cloud&lt;/a&gt; for this, as this is something I wish to experience, but it&apos;s not quite ready yet.&lt;/p&gt;
&lt;p&gt;Critically, it has no support for &lt;a href=&quot;https://docs.datomic.com/on-prem/excision.html&quot;&gt;excision&lt;/a&gt;, which is a key requirement for this app — we&apos;d be honour (and legally) bound to lose people&apos;s &lt;abbr title=&quot;Personally Identifiable Information&quot;&gt;PII&lt;/abbr&gt; when they request it. Given that Datomic doesn&apos;t actually delete anything, this is a problem which only excision can solve.&lt;/p&gt;
&lt;img src=&quot;https://memegenerator.net/img/instances/78164808/say-gdpr-one-more-time.jpg&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;Aside: sending big hugs ♥️ to all the tech folks currently making ready for &lt;a href=&quot;https://www.eugdpr.org/&quot;&gt;Europe&apos;s GDPR&lt;/a&gt; legislation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Less important for this project is that Datomic Cloud doesn&apos;t yet have a story for transactor functions, or backup/restore. I know that all of this is still coming!&lt;/p&gt;
&lt;p&gt;The other thing, though, is that someone has to pay to host this once it&apos;s built, and a USD40/month VPS running Datomic Free and our Clojure app is likely to be all we need. Using Datomic Cloud will cost at least 2-3x that, due to the need for multiple AWS resources.&lt;/p&gt;
&lt;p&gt;All is not lost, though! I will use this opportunity to build with the &lt;a href=&quot;https://docs.datomic.com/client-api/index.html&quot;&gt;Datomic Client&lt;/a&gt; library instead of the &lt;a href=&quot;https://docs.datomic.com/on-prem/clojure/index.html&quot;&gt;Datomic Peer&lt;/a&gt; library, as it is a substantially simpler (and therefore different) API. This&apos;ll also teach me about running a &lt;a href=&quot;https://docs.datomic.com/on-prem/peer-server.html&quot;&gt;Peer Server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That way, one day, I&apos;ll be able to convert the project to use Cloud when it&apos;s ready. I expect that conversion to be a quick one.&lt;/p&gt;
&lt;h4 id=&quot;im-not-a-designer&quot;&gt;I&apos;m not a designer&lt;/h4&gt;
&lt;p&gt;… so I&apos;ll be using &lt;a href=&quot;https://bulma.io&quot;&gt;Bulma&lt;/a&gt; to style all of the pages. Not only does it look great, it doesn&apos;t force any JavaScript on you.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;progress-so-far&quot;&gt;Progress so far&lt;/h2&gt;
&lt;p&gt;I&apos;ve waited to write about all of this, because I wanted to have some progress to show. So, here&apos;s the code!&lt;/p&gt;
&lt;p&gt;​    &lt;a href=&quot;https://github.com/robert-stuttaford/bridge&quot;&gt;https://github.com/robert-stuttaford/bridge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So far, it has:&lt;/p&gt;
&lt;h4 id=&quot;development-and-build-tools-without-leiningen&quot;&gt;Development and build tools without Leiningen&lt;/h4&gt;
&lt;p&gt;All using the &lt;code&gt;clojure&lt;/code&gt; CLI, and a &lt;code&gt;Makefile&lt;/code&gt; to save the repetitive typing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REPL + Figwheel, with CIDER/clj-refactor middleware.&lt;/li&gt;
&lt;li&gt;Test runner, thanks to the recently released &lt;a href=&quot;https://github.com/cognitect-labs/test-runner&quot;&gt;test-runner&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Uberjar packaging, thanks to Juxt&apos;s &lt;a href=&quot;https://github.com/juxt/pack.alpha&quot;&gt;pack.alpha&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Advanced Cljs compiler, thanks to the brand-spanking-new &lt;a href=&quot;https://github.com/clojure/clojurescript/blob/master/src/main/clojure/cljs/cli.clj&quot;&gt;cljs.main CLI stuff&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On that last one, here&apos;s a fun one-liner to try (thanks again, &lt;a href=&quot;https://twitter.com/mfikes/status/964919064371122176&quot;&gt;@mfikes&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sh&quot;&gt;clojure -Sdeps &apos;{:deps {org.clojure/clojurescript {:git/url &amp;quot;https://github.com/clojure/clojurescript&amp;quot; :sha &amp;quot;4df0542339e533b2d1e1dd7f6ffa8824eab64893&amp;quot;}}}&apos; -m cljs.main -h
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With all of these in place, I&apos;m happy that I can provision CI and run this in a production setting.&lt;/p&gt;
&lt;h4 id=&quot;web-service&quot;&gt;Web service&lt;/h4&gt;
&lt;p&gt;An Integrant system, connecting a Jetty web server, a Datomic connection, and a &lt;em&gt;say-it-with-me&lt;/em&gt; Ataraxy  Ring handler.&lt;/p&gt;
&lt;p&gt;It was fun to compose Integrant with &lt;a href=&quot;https://github.com/hlship/dyn-edn&quot;&gt;dyn-edn&lt;/a&gt;, released just a couple days ago. By providing its capability as data readers, it was trivial to use with Integrant&apos;s own &lt;code&gt;read-string&lt;/code&gt;. Thanks again, &lt;a href=&quot;https://twitter.com/hlship&quot;&gt;@hlship&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;It also has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A simple templating system, using a standard HTML wrapper and Hiccup (via &lt;a href=&quot;https://github.com/tonsky/rum#server-side-rendering&quot;&gt;Rum&apos;s server-side rendering&lt;/a&gt;).
&lt;ul&gt;
&lt;li&gt;Everything from this point onwards is a matter of writing Hiccup, which has been my native markup language for years now.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Session management.&lt;/li&gt;
&lt;li&gt;Logging.&lt;/li&gt;
&lt;li&gt;Pages:
&lt;ul&gt;
&lt;li&gt;Login, powered by &lt;a href=&quot;https://github.com/funcool/buddy-auth&quot;&gt;buddy-auth&lt;/a&gt; and &lt;a href=&quot;https://github.com/funcool/buddy-hashers&quot;&gt;buddy-hashers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Access-controlled Cljs client app, using &lt;a href=&quot;https://github.com/tonsky/rum&quot;&gt;Rum&lt;/a&gt;. It doesn&apos;t actually do anything yet :-)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;next-steps-from-here&quot;&gt;Next steps from here&lt;/h2&gt;
&lt;p&gt;So, there we have it!&lt;/p&gt;
&lt;p&gt;I&apos;m all set to begin building the actual application, now. That means starting with that most-requested Datomic feature: modelling data.&lt;/p&gt;
&lt;p&gt;Taking inspiration from my colleague &lt;a href=&quot;https://twitter.com/nikitonsky&quot;&gt;tonsky&lt;/a&gt;, who &lt;a href=&quot;https://www.youtube.com/watch?v=Oy3IImX-nSU&quot;&gt;live-streams Clojure programming&lt;/a&gt; (in Russian),  I&apos;d like to experiment with doing this in a live-stream, too. Failing that, I may simply record a couple programming sessions, and share it that way.&lt;/p&gt;
&lt;p&gt;No matter what else, I&apos;ll be sharing the code and writing developer diaries along the way, just as I have done today.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;in-closing&quot;&gt;In closing&lt;/h2&gt;
&lt;p&gt;I have no idea where I&apos;ll end up with this project. I recognise that many projects that start this way, never get finished, which I guess is a risk I&apos;ll just have to take.&lt;/p&gt;
&lt;p&gt;Of course, I have a selfish reason for doing this, that goes beyond the pure and simple &lt;em&gt;fun&lt;/em&gt; of building something — and that&apos;s to promote my &lt;a href=&quot;/consulting/&quot;&gt;consulting&lt;/a&gt; practice. My hope is that I can demonstrate my value, rather than writing short novels about it — &amp;quot;show, don&apos;t tell,&amp;quot; if you will.&lt;/p&gt;
&lt;p&gt;Regardless of whether my consulting interests you, if you&apos;re at all interested in this adventure, I&apos;d love to hear from you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What aspects interest you? What are you hoping I&apos;ll cover?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&apos;m particularly interested in unpacking the &apos;why&apos; questions, because it leads to interesting discussions around the tradeoffs involved, and how the need and the solution fit together.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Please get in touch&lt;/a&gt; — even if just to vote for that live-stream!&lt;/p&gt;
</content></entry><entry><title>People are fascinating</title><link href="http://www.stuttaford.me/2018/02/03/people-are-fascinating/" /><updated>2018-02-04T13:55:31Z</updated><id>http://www.stuttaford.me/2018/02/03/people-are-fascinating/</id><content type="html">&lt;p&gt;People fascinate me.&lt;/p&gt;
&lt;p&gt;We spend so much time trying to understand them, to build systems to organise them, and - unfortunately - too much time arguing about which one is right, or trying to get those people to use one they don’t buy into.&lt;/p&gt;
&lt;p&gt;Over the years, I’ve become something of a student of this stuff, because of that fascination. A student of the workings of my own mind, because quite often it tries to get me to do things I know aren’t helpful, or it does something so wonderful that I want to find a way to make it happen more often. A student of the people that surround me, because quite often they can surprise me… in ways that are positive and not-so-positive.&lt;/p&gt;
&lt;p&gt;This fascination - this study of people - gained a sense of urgency when I became a father. Suddenly, I was no longer the only recipient of my consequences. I had to be able to grow, support, guide, and direct the mind of a brand new human being. I found that I became a LOT more interested in how that process happens!&lt;/p&gt;
&lt;p&gt;So, given this fascination, I have encountered a handful of helpful conceptual frameworks for understanding the behaviour and intentions of the people around me (and of course, my own), and I’d like to share some of them with you today.&lt;/p&gt;
&lt;p&gt;Before we dive in, here are some ways you can take advantage of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At minimum, these are all applicable to the grand project of getting to know yourself, but you can also use them to figure out what may be making a colleague, superior, or direct report tick.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They’re great tools to use during 1:1 conversations, whether you’re the coach or the person receiving the coaching.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They’re helpful for team retrospectives, where you unpack the way in which things unfolded, rather than the results themselves.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you’re a parent, or in a committed relationship, one of these may be just the thing you needed to unlock a… “character-building” situation you may find yourself in :-)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Onwards!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;introvert--extrovert-spectrum&quot;&gt;Introvert / extrovert spectrum&lt;/h2&gt;
&lt;p&gt;I’m a 10/10 introvert.&lt;/p&gt;
&lt;p&gt;That’s according to &lt;a href=&quot;https://www.quietrev.com/the-introvert-test/&quot;&gt;Susan Cain’s Quiet Introvert/Extrovert test&lt;/a&gt;. It wasn’t surprising that I’m on this side of this continuum, but the degree to which I am actually so surprised me.&lt;/p&gt;
&lt;p&gt;When I shared this news with a colleague, he was surprised - because he had only ever encountered my “pseudo-extrovert” persona, that I put on like a suit of clothing whenever it was time to be social.&lt;/p&gt;
&lt;p&gt;Given my audience, it’s quite likely that you’re more introvert than extrovert too, and that you have an extrovert persona which you wear when needed.&lt;/p&gt;
&lt;p&gt;Very often, the root cause of a ‘disturbance in the force’ with someone on your team can simply be that all their energy is being used in an excessively social setting. E.g. An open-plan office with no quiet-time rules, or scheduled focus time, can lead otherwise stable people to a frustrated madness.&lt;/p&gt;
&lt;p&gt;This spectrum is one of the reasons why one size does not fit all, and why you need to negotiate a comfortable work setup for each person.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Where are you on this spectrum?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What about your working environment or team setup can you change to better support your nature, or the nature of those in your team?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;intrinsic--extrinsic-motivators&quot;&gt;Intrinsic / extrinsic motivators&lt;/h2&gt;
&lt;p&gt;This one’s golden. I’ve had so many productive coaching conversations thanks to this. And, I’ve become a lot more conscious of my own needs, and been able to meet them with far less fuss.&lt;/p&gt;
&lt;p&gt;Dan Pink wrote a book called Drive, in which he unpacks what we currently understand about motivating human beings.&lt;/p&gt;
&lt;p&gt;Here&apos;s a great 10 min video overview:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=u6XAPnuFjJc&quot;&gt;Drive: The surprising truth about what motivates us&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The heart of the matter is that there are basically two kinds of motivation - extrinsic (namely, &lt;strong&gt;Carrot&lt;/strong&gt; and &lt;strong&gt;Stick&lt;/strong&gt;), and intrinsic (&lt;strong&gt;Mastery&lt;/strong&gt;, &lt;strong&gt;Autonomy&lt;/strong&gt;, and &lt;strong&gt;Purpose&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Although it’s vital that you get those first two right, the idea is that you can only ‘get’ so much using them. If you want truly phenomenal performance (for yourself, or for someone in your team), you need to focus on the last three.&lt;/p&gt;
&lt;p&gt;This model is so useful, because each person is motivated by different things, to differing extents, and this framework makes no assumptions about what any person should have in either. I’ve used these 5 motoivators with great success in helping someone break out of a slump, resolve anxiety, or find growth areas to focus on.&lt;/p&gt;
&lt;p&gt;If you use this model, be aware that each person has a different mix, and that this mix changes as people grow.&lt;/p&gt;
&lt;p&gt;For instance, junior engineers typically have a major Mastery theme, but a modest Autonomy theme. As they grow into self-managing engineers, their Autonomy gradually rises to the level of their Mastery.&lt;/p&gt;
&lt;p&gt;Some more experienced hands may have a more modest Mastery theme, and are more concerned with applying their talents according to a very clear Purpose, and with a high degree of Autonomy.&lt;/p&gt;
&lt;p&gt;Personally, I both need and have a high degree of Mastery, Autonomy, and Purpose. It’s my sweet spot, one I feel tremendously fortunate to occupy!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What motivates you?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Are your basic comforts and constraints suitable?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;If you’re struggling with something in your work life, see if you can map it to one of these motivators. Note that just as you may have too little of something, you may also have too much!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;growth--fixed-mindset&quot;&gt;Growth / Fixed Mindset&lt;/h2&gt;
&lt;p&gt;This is the one that underpins it all, for me. One of the intrinsic motivators above is Mastery - which I summarise as “learning and the application of that learning” - and it is a major theme of my personality.&lt;/p&gt;
&lt;p&gt;Carol Dweck wrote a small book with a huge idea in it about &lt;a href=&quot;https://www.brainpickings.org/2014/01/29/carol-dweck-mindset/&quot;&gt;Mindsets&lt;/a&gt;, which has unlocked an endless supply of Mastery for me: the Growth Mindset.&lt;/p&gt;
&lt;p&gt;Fundamentally, it’s the idea that the story is never finished. Change is always possible. Improvement is always possible. The Japanese embody it with &amp;quot;Kaizen&amp;quot;. Having told so many people about this already, I’ve come to summarise it with the pithy phrase “&lt;strong&gt;curiosity over identity&lt;/strong&gt;,” which describes the way I use it in daily life.&lt;/p&gt;
&lt;p&gt;I have no doubt that one day, I’m going to be able to trigger an instant eye-roll in my children with the phrase ‘growth mindset’, because they’re going to hear it a LOT :-)&lt;/p&gt;
&lt;p&gt;Whether intended or not, the Clojure community champions this ideal - both in the way that it shamelessly uses good ideas from other communities, but also in the way that we entertain new ideas without judgment.&lt;/p&gt;
&lt;p&gt;Of course, it’s not possible to operate without some fixed mindsets - and that’s OK. The point is, you choose them consciously, and you are able to unfix them if necessary. Another pithy summary could be &amp;quot;Strong opinions, loosely held.”&lt;/p&gt;
&lt;p&gt;Over, and over, whenever someone is unhappy, or causing unhappiness for the people around them, I’ve found that it is because one or more unexamined fixed mindsets are in play.&lt;/p&gt;
&lt;p&gt;If you’re having a tough time agreeing on something, or feel a dissatisfaction with the state of your environment or your team, look inward. Find your fixed mindsets about those things. See if you actually want those opinions - sometimes, they were put there long before you were able to choose them for yourself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Where are your fixed mindsets?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;What could you begin improving in your life today if you decided to get curious about it, instead of re-telling yourself the same tired story about it?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;all-models-are-wrong&quot;&gt;All models are &apos;wrong&apos;&lt;/h2&gt;
&lt;p&gt;What’s crucial to note about all of these frameworks is that there’s no ‘right’ or ‘wrong’ - there is only appropriate/inappropriate, suitable/unsuitable, skilful/unskilful (thanks, Buddhism!). If it’s not helping (and you’re pretty sure you’ve not misapplied it), find another way.&lt;/p&gt;
&lt;p&gt;The truth is, like all models, they are approximations. They’re not truly describing you or the people around you, or their behaviours or attitudes. I don’t think we can ever truly do that. But, they are useful. And using them turns getting to know yourself, and the people around you, into a fascinating experience.&lt;/p&gt;
&lt;p&gt;If you’re aware that something isn’t working in your team, or in your role, I encourage you to assess your preferences within each of these frameworks, and find where the mismatches are with the environment you’re in.&lt;/p&gt;
&lt;p&gt;Then, use those differences to start a new conversation about how things can change, and to pick a tangible next action or two.&lt;/p&gt;
&lt;p&gt;As I’ve found over and over, it’s often just the act of expressing things in terms of one or another of these models that brings enough fresh energy and perspective to the situation. As Carl Jung says, &amp;quot;To ask the right question is already half the solution of a problem.”&lt;/p&gt;
&lt;p&gt;After all, we’re all creative problem-solvers - often, all we need is the right perspective, and our natural inclinations tend to take care of the rest!&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A fixed mindset I know that I have is an &lt;em&gt;intense&lt;/em&gt; dislike of advertising.&lt;/p&gt;
&lt;p&gt;However, I’ve recently decided to share all my learning with the community as a consultant, and so, I’m having to advertise myself. This is proving to be quite a challenge!&lt;/p&gt;
&lt;p&gt;I’m accepting that I have to make folks aware of what I’m offering. So, the fun is in finding a way to do this that doesn’t trigger my own highly developed advertising filter!&lt;/p&gt;
&lt;p&gt;So - here goes:&lt;/p&gt;
&lt;p&gt;I offer &lt;a href=&quot;/consulting/&quot;&gt;consulting on the wise use of the Clojure stack&lt;/a&gt;, but if you’d like me to help your team out with the sort of thing I’ve described above, I’d be most happy to do so. I may be of particular help if any of these models is new to you or your team.&lt;/p&gt;
&lt;p&gt;Phew. I think I did OK. Growth mindset, right?&lt;/p&gt;
&lt;p&gt;If nothing else, I hope that I have inspired you to re-examine your relationships - with yourself, and with the fine folks you’ve chosen to spend a great deal of your precious, irreplaceable time with - and find ways to deepen those bonds, and enjoy your time together more fully.&lt;/p&gt;
&lt;p&gt;If I have inspired you, (or if I haven’t), I would love to know about it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Please tell me&lt;/a&gt;!&lt;/p&gt;
</content></entry><entry><title>How Cognician uses Onyx</title><link href="http://www.stuttaford.me/2016/01/15/how-cognician-uses-onyx/" /><updated>2018-02-03T18:05:48Z</updated><id>http://www.stuttaford.me/2016/01/15/how-cognician-uses-onyx/</id><content type="html">&lt;p&gt;&lt;a href=&quot;https://www.cognician.com/&quot;&gt;Cognician&lt;/a&gt;, the ed-tech company I co-founded in 2010, uses the Clojure stack:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt; and &lt;a href=&quot;https://github.com/clojure/clojurescript&quot;&gt;ClojureScript&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.datomic.com&quot;&gt;Datomic&lt;/a&gt;, a distributed, ACID-transactional, relational, immutable database.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.onyxplatform.org/&quot;&gt;Onyx&lt;/a&gt;, a masterless, distributed computation framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the actions listed below use the same set of immutable data-structures – good old maps, vectors, and sets – and they’re all plain old unadorned data – no special types!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client interactions in the browser.&lt;/li&gt;
&lt;li&gt;Network ops between the browser and API end points (with great transfer and parse performance, thanks to &lt;a href=&quot;http://blog.cognitect.com/blog/2014/7/22/transit&quot;&gt;Transit&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Handling web requests.&lt;/li&gt;
&lt;li&gt;Manipulating and storing data in Datomic.&lt;/li&gt;
&lt;li&gt;Declaring and integrating computations in Onyx.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have been using Clojure, ClojureScript and Datomic for several years. The most recent addition is Onyx, which we put into production in September 2015. We had some bumps along the way, but now that we’ve learned the requisite skills to run this powerful system suitably well, I’m incredibly happy with it.&lt;/p&gt;
&lt;h2 id=&quot;a-need-for-scalable-continuous-event-stream-processing&quot;&gt;A need for scalable, continuous event-stream processing&lt;/h2&gt;
&lt;p&gt;Around September 2014 we were planning the next version of our platform, and had a need for a horizontally scalable computation system; one which wouldn’t need a total rewrite in a couple years as we scaled up. It could not be batch-based, as we wanted to process events coming in from our users as we received them on a continuous basis - a facility known as ‘event stream processing’.&lt;/p&gt;
&lt;p&gt;The only real option we had back then as a Clojure team, was Twitter’s Storm (now an Apache project). Storm is great in many ways, but one of them is not ease of development and debugging. The deployment story was quite complex, considering that until that time, all we had to do was put &lt;code&gt;.jar&lt;/code&gt; files on servers behind AWS’ ELB. And, it used an old version of Clojure, which made it impossible to take advantage of new features in the language.&lt;/p&gt;
&lt;p&gt;Despite all that, we were going to go ahead with it and spike a solution, to see how things go. Happily, before we made any significant headway, I saw Michael Drogalis’s first Onyx talk, which he gave at StrangeLoop 2014 (&lt;a href=&quot;https://www.youtube.com/watch?v=vG47Gui3hYE&quot;&gt;video&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Once I saw this video, I realised why I didn’t want to use Storm: its API is a special set of macros which encapsulates all the ‘glue’. But we’re in Clojure, we have something better: plain old data. And that’s what Onyx uses, for the most part; your actual workhorse ‘do-the-things’ logic lives as pure functions, and just about everything else is just data!&lt;/p&gt;
&lt;p&gt;We’ve already learned that this is the best possible way to build an API. We’d been living this dream with Ring and Datomic for a while, and seeing how Onyx used the same great approach made it a natural fit for our context.&lt;/p&gt;
&lt;p&gt;We decided to go ahead with it, and over the course of 12 months, along with the rest of our new platform, we built an event-stream processing system with Onyx.&lt;/p&gt;
&lt;p&gt;Before I can describe how we use Onyx, I’m going to go over some of its key concepts.&lt;/p&gt;
&lt;h2 id=&quot;onyxs-api-is-mostly-data&quot;&gt;Onyx’s API is mostly data&lt;/h2&gt;
&lt;p&gt;The Onyx data API is broken into several cleverly designed pieces (see the &lt;a href=&quot;https://onyx-platform.gitbooks.io/onyx/content/&quot;&gt;documentation site&lt;/a&gt; or the &lt;a href=&quot;http://www.onyxplatform.org/docs/cheat-sheet/&quot;&gt;cheat-sheet&lt;/a&gt; for the full picture):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Peer configuration&lt;/strong&gt;, which defines the shape of the overall system; how many peers (individual worker bees) you’re going to run, &lt;a href=&quot;https://zookeeper.apache.org/&quot;&gt;ZooKeeper&lt;/a&gt; (for coordination) and &lt;a href=&quot;https://github.com/real-logic/Aeron&quot;&gt;Aeron&lt;/a&gt; (for networking) configuration, and many, &lt;em&gt;many&lt;/em&gt; dials and knobs for managing overall performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Catalog&lt;/strong&gt;, which defines the tasks that can make up an Onyx job. Think of this as a set of puzzle pieces before they’ve been assembled into a cohesive picture. There are many knobs and dials for controlling performance at the task level here, too. There are three kinds of task:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Inputs&lt;/strong&gt;: typically queue consumers, such as Kafka, RabbitMQ, or Datomic (yep!). Core.Async channels work great too. Extensible; could be whatever you like.&lt;/li&gt;
&lt;li&gt;Good old &lt;strong&gt;functions&lt;/strong&gt;: pointers to your workhorse logic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Outputs&lt;/strong&gt;: typically some sort of persistence - SQL, S3, Datomic, etc. And yes, Core.Async channels too. Also extensible.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Workflow&lt;/strong&gt;, which arranges tasks from the catalog into a graph of inputs ⟶ functions ⟶ outputs. In the puzzle analogy, the catalog contains puzzle pieces, and the workflow is the completed puzzle.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These first three sets of data are required - you can build a fully functional (albeit quite simple) computation with just these. However, if you want to handle complexity, you’re going to need some additional tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flow Conditions&lt;/strong&gt;, which provide a way to run segments through a predicate function before allowing them to move from  task to task. This allows us to stop work early, and generally control the flow of segments to tasks. Flow conditions also provide a nice way to handle exceptions in tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lifecycles&lt;/strong&gt;, a way to manage the per-task and per-batch state for tasks, and also cross-cutting concerns like metrics and logging. We use these to send metrics to &lt;a href=&quot;http://datadoghq.com/&quot;&gt;DataDog’s&lt;/a&gt; statsd agent. Another great way to keep actual business logic simple. &lt;em&gt;Kind of&lt;/em&gt; analogous to Ring middleware.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use both of these to great effect. Since we built our system, even more goodies have become available, which we’ve not yet had a chance to take advantage of: &lt;a href=&quot;http://michaeldrogalis.github.io/jekyll/update/2015/11/12/Onyx-0.8.0-Automatic-State-Management.html&quot;&gt;Windows and Triggers, which Michael describes far better than I can here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In summary, they allow you to gather up segments into buckets (Windows) and do something of consequence with them (Triggers). One use we have for this in the future is to “debounce” events for a single user; that is, prevent processing events for that user more often than, say, every 5 seconds. This is a great way to reduce overall workload when processing at scale.&lt;/p&gt;
&lt;h2 id=&quot;how-cognician-uses-onyx&quot;&gt;How Cognician uses Onyx&lt;/h2&gt;
&lt;p&gt;Our Onyx system, named Highstorm (which I lifted from Brandon Sanderson’s seriously &lt;em&gt;fantastic&lt;/em&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Stormlight_Archive&quot;&gt;The Stormlight Archive fantasy novel series&lt;/a&gt;), has several duties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Calculate and store statistics and aggregates&lt;/strong&gt;, so that web pages and offline analysis can be faster. As all of our data lives in Datomic, these values are 100% inferred; all the raw source data is in the database before Highstorm begins its work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create direct relationship caches&lt;/strong&gt; between indirectly related Datomic entities that often appear in queries together, also to simplify queries and improve their performance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Send messages&lt;/strong&gt;, such as email.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aside from the last of these, you could think of Highstorm as a sort of &lt;em&gt;scalable, eventually-consistent database function system&lt;/em&gt;. Of course, it’s different to actual &lt;a href=&quot;http://docs.datomic.com/database-functions.html&quot;&gt;Datomic database functions&lt;/a&gt; in several very important ways, and should not be mistaken for those! But, even so, it’s a handy analogy.&lt;/p&gt;
&lt;p&gt;Before we dive into the details of how we did this, I think it’s important to understand how we were able to fit Onyx into the overall infrastructure.&lt;/p&gt;
&lt;h1 id=&quot;how-onyx-fits-into-cognicians-infrastructure&quot;&gt;How Onyx fits into Cognician’s infrastructure&lt;/h1&gt;
&lt;p&gt;Typically, when integrating a new system, you’d decouple it from the rest of your infrastructure with a queue, and so that’s what we did. But we didn’t use a separate queue technology like Apache Kafka or RabbitMQ.&lt;/p&gt;
&lt;p&gt;This is thanks to a great feature of Datomic’s, which is that every connected peer is aware of changes to the database &lt;strong&gt;in real time&lt;/strong&gt;. They have to be, thanks to the way query works - see the green ’Live Index’ pictured in &lt;a href=&quot;http://docs.datomic.com/architecture.html&quot;&gt;this Datomic architecture diagram&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Highstorm’s primary input task simply watches the Datomic transaction log, and puts each transaction log entry into the system to be processed as they become available. Then, whatever changes to be stored ultimately reach Highstorm’s output task as transaction data, ready to be transacted.&lt;/p&gt;
&lt;p&gt;Onyx has a Datomic plugin which provides both the &lt;a href=&quot;https://github.com/onyx-platform/onyx-datomic#read-log&quot;&gt;input&lt;/a&gt; and &lt;a href=&quot;https://github.com/onyx-platform/onyx-datomic#commit-bulk-tx&quot;&gt;output&lt;/a&gt; tasks that Highstorm uses.&lt;/p&gt;
&lt;p&gt;From an infrastructure perspective, this is great. Here’s a ‘before’ picture:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Web+Datomic.png&quot; alt=&quot;Web + Datomic + DynamoDB&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We have a pair of web servers connected to a highly-available pair of Datomic transactors, and to DynamoDB for storage.&lt;/p&gt;
&lt;p&gt;And here’s what it looks like with Onyx:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Web+Datomic+Onyx.png&quot; alt=&quot;Web + Datomic + DynamoDB + Onyx&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Note: web server lines removed for clarity. Also, I used &lt;a href=&quot;https://cloudcraft.co/&quot;&gt;https://cloudcraft.co/&lt;/a&gt; to draw these diagrams.&lt;/p&gt;
&lt;p&gt;Onyx only connects to Datomic the same places that the web peers do in the original diagram. That is, they’re also just Datomic peers. There is no separate queue or coordination mechanism between the web and worker tiers.&lt;/p&gt;
&lt;p&gt;This is a crucial point: we’re applying the same lesson to architecture that we learned at the programming layer: make data your interface. Our web tier communicates with our worker tier only through data in the database!&lt;/p&gt;
&lt;p&gt;To dive into the details a bit, we’ll look at how we send email with Highstorm, as it’s a great example of this data-as-interface pattern.&lt;/p&gt;
&lt;h1 id=&quot;data-as-interface-between-systems&quot;&gt;Data as interface between systems&lt;/h1&gt;
&lt;p&gt;When our system has to send email, such as when providing a user with a reset-your-password token, all the web server does is write a new ‘pending message’ entity to Datomic:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(ns your.app.messaging
  (:require [datomic.api :as d]
            [ring.util.response :as response))

(defn save-pending-message! [db-uri template params]
  @(d/transact-async
    (d/connect db-uri)
    [{:db/id (d/tempid :db.part/user)
      :msg/uuid (d/squuid)
      :msg/template template
      :msg/params (pr-str params)
      :msg/status :status/pending}]))

;;;

(ns your.app.web.reset-password
  (:require [your.app.messaging :refer
             [save-pending-message!]]))

(defn handle-reset-password [db-uri email]
  ;; ... validate email, generate token ...
  (save-pending-message! db-uri &amp;quot;reset-password&amp;quot;
                         {:email email
                          :token token})
  (response/response &amp;quot;OK&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’ve any experience with Datomic, this is all pretty standard. As we don’t expect to do anything with the result, we’re happy to use &lt;code&gt;transact-async&lt;/code&gt; here, which will return immediately, freeing the web server up to carry processing the request. At this point, the web server is done with sending the email.&lt;/p&gt;
&lt;p&gt;In Highstorm, we have a task which immediately follows our Datomic transaction log input task in the workflow. It inspects Datomic transactions to check for the presence of datoms (atomic facts in the database) that match any of the preconfigured patterns in our worker tasks. I’ll refer to it as &lt;code&gt;prepare-tx&lt;/code&gt; below.&lt;/p&gt;
&lt;p&gt;So, our &lt;code&gt;send-message&lt;/code&gt; task uses this pattern:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[_ :msg/status :status/pending _ true]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As is typical in Clojure, we use &lt;code&gt;_&lt;/code&gt; to mean ‘this can be any value; I’m not going to use it’. So, this pattern declares that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any entity ID is valid.&lt;/li&gt;
&lt;li&gt;The attribute must be &lt;code&gt;:msg/status&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The value for that attribute must be &lt;code&gt;:status/pending&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Any transaction ID is valid.&lt;/li&gt;
&lt;li&gt;Datoms contain a boolean &lt;code&gt;true&lt;/code&gt; to indicate assertions in the database, and &lt;code&gt;false&lt;/code&gt; for retractions. This is great: it means we can respond to retractions of facts just as easily as we do for new facts! In this case, though, the operation must be ‘assertion’, not ‘retraction’.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Through the use of dynamically generated flow conditions (easy to do, thanks to them being plain old data), we only allow a segment produced by &lt;code&gt;prepare-tx&lt;/code&gt; to reach &lt;code&gt;send-message-task&lt;/code&gt; when its datom matches this pattern.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;send-message-task&lt;/code&gt; function appears in the catalog, and is also quite simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn send-message-task [{:keys [db-uri t datom config]
                          :as segment}]
  (let [ ;; get db using the basis t provided by input task
        db (d/as-of (d/db (d/connect db-uri)) t)

        ;; get message entity id from the datom
        msg-id (first datom)

        ;; use the provided db and message id
        ;; to compose the message
        composed-msg (compose-message config db msg-id)

        ;; actually send the message
        api-result (send-message! config composed-msg)

        ;; build a tx modelling the new information we have
        result-tx {:db/id msg-id
                   :msg/composed composed-msg
                   :msg/result (pr-str api-result)
                   :msg/status :status/sent}]

    ;; add the result transaction to the segment
    ;; for later persistence to Datomic
    (update-in segment [:tx] conj result-tx)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some points of interest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The segment, which is just a Clojure map, has all the Highstorm system configuration, so no global state is necessary. It’s easy to test by mocking alternate config.&lt;/li&gt;
&lt;li&gt;We use the &lt;code&gt;t&lt;/code&gt; value from the transaction to create a database to query. We do this for all the processing we do for a given task, making our view on the database consistent throughout all the tasks in the workflow for that segment.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;send-message!&lt;/code&gt; function is side-effecting, because it does I/O. There’s just no avoiding it in this case. However, once we’ve done that, we go back to working with immutable data.&lt;/li&gt;
&lt;li&gt;Since Highstorm’s only output is more transactions for Datomic to process, all our intermediate tasks produce transaction data. Key for this task is that we change the message status to &lt;code&gt;:status/sent&lt;/code&gt;. We also like to store the composed message so that our operations staff can easily diagnose issues when things don’t go as expected.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once this segment reaches the output task, its transaction data is committed to storage, and it’s available for query on the web tier again.&lt;/p&gt;
&lt;p&gt;So, to summarise the workflow, all of the segments in Highstorm follow this process, regardless of what the tasks in the middle do.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;tx-log-input&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;⟶ &lt;code&gt;prepare-tx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;⟶ &lt;code&gt;[task(s) matching datom pattern]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;⟶ &lt;code&gt;commit-tx&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is quite awesome, I think!&lt;/p&gt;
&lt;h1 id=&quot;thats-it-for-now&quot;&gt;That’s it for now&lt;/h1&gt;
&lt;p&gt;I could go on and on :-)&lt;/p&gt;
&lt;p&gt;Given how core this system is to our platform, I have plenty of other topics that I can talk about on it, which I plan to do in a follow up post or two:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using Stuart Sierra’s ‘reloaded workflow’.&lt;/li&gt;
&lt;li&gt;Ease of development.&lt;/li&gt;
&lt;li&gt;Handling error conditions.&lt;/li&gt;
&lt;li&gt;Working with metrics.&lt;/li&gt;
&lt;li&gt;Tuning Onyx performance, including some hard-won lessons on back-pressure and throughput.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;a-huge-huge-thank-you&quot;&gt;A huge, &lt;em&gt;huge&lt;/em&gt; thank you&lt;/h1&gt;
&lt;p&gt;I want to thank the two (yes, just two!) guys in the Onyx team – &lt;a href=&quot;https://twitter.com/michaeldrogalis&quot;&gt;Michael Drogalis&lt;/a&gt;, who first conceived of Onyx, and &lt;a href=&quot;https://twitter.com/ghaz&quot;&gt;Lucas Bradstreet&lt;/a&gt;, who joined the cause about a year later – for their incredible patience and support during our learning curve with Onyx.&lt;/p&gt;
&lt;p&gt;I know that although we were able to contribute by sharing bug reports, or feedback on this API or the utility of that feature, we at Cognician by far got the better deal. Thank you, guys. You’re both menschen!&lt;/p&gt;
&lt;p&gt;I wouldn’t hesitate for a second to recommend them to anyone who wants to use Onyx in anger - they’ve just recently started a consultancy to offer commercial support, training, development and so on; you can hit them up at &lt;a href=&quot;http://www.onyxplatform.org/support&quot;&gt;http://www.onyxplatform.org/support&lt;/a&gt;. I can’t think of a better way to get started.&lt;/p&gt;
&lt;p&gt;You can also simply pop in for a chat on their their &lt;a href=&quot;https://gitter.im/onyx-platform/onyx&quot;&gt;Gitter room&lt;/a&gt;, or in the &lt;code&gt;#onyx&lt;/code&gt; room on the &lt;a href=&quot;https://clojurians.slack.com/&quot;&gt;Clojurians Slack&lt;/a&gt; (&lt;a href=&quot;http://clojurians.net/&quot;&gt;not a member?&lt;/a&gt;). If you do, I’ll see you there!&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</content></entry><entry><title>App and dev services with Trapperkeeper</title><link href="http://www.stuttaford.me/2014/09/24/app-and-dev-services-with-trapperkeeper/" /><updated>2018-01-11T15:57:15Z</updated><id>http://www.stuttaford.me/2014/09/24/app-and-dev-services-with-trapperkeeper/</id><content type="html">&lt;p&gt;At Cognician, we&apos;ve started building our next generation of
administrative tooling. We chose the following stack:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/puppetlabs/trapperkeeper&quot;&gt;Trapperkeeper&lt;/a&gt;, a
toolkit for binding disparate components together, using Stuart Sierra&apos;s
&lt;a href=&quot;https://github.com/stuartsierra/component&quot;&gt;Component&lt;/a&gt; for lifecycle management
and Prismatic&apos;s
&lt;a href=&quot;https://github.com/Prismatic/plumbing#graph-the-functional-swiss-army-knife&quot;&gt;Graph&lt;/a&gt;
for dependency management. Includes a configuration service.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pedestal/pedestal&quot;&gt;Pedestal&lt;/a&gt;, a toolkit for
handling HTTP, including routing, async capability (particularly,
HTTP SSE) and great security defaults.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.datomic.com/&quot;&gt;Datomic&lt;/a&gt;, an immutable database.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MichaelDrogalis/onyx&quot;&gt;Onyx&lt;/a&gt;, a Storm successor
for distributed event stream processing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/cognitect/transit-format&quot;&gt;Transit&lt;/a&gt;, a
self-describing wire format built on top of JSON/MessagePack, for
client/server transfer.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/swannodette/om&quot;&gt;Om&lt;/a&gt;, an opinionated
ClojureScript wrapper over Facebook&apos;s React library.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We like this stack particularly because it&apos;s 100% Clojure, from
browser through web server and event processing to database. One
toolset, one syntax, one paradigm, all with immutable persistent data
structures. Nice.&lt;/p&gt;
&lt;p&gt;To produce the Javascript that runs in the browser, we need to compile
our ClojureScript and also the common code shared by both client and
server. For these, we use
&lt;a href=&quot;https://github.com/thheller/shadow-build&quot;&gt;shadow-build&lt;/a&gt; and
&lt;a href=&quot;https://github.com/lynaghk/cljx&quot;&gt;cljx&lt;/a&gt; respectively.&lt;/p&gt;
&lt;p&gt;We &lt;em&gt;don&apos;t&lt;/em&gt; use
&lt;a href=&quot;https://github.com/emezeske/lein-cljsbuild&quot;&gt;lein-cljsbuild&lt;/a&gt; for two
basic reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We build many different Javascript projects, some from the same Git
repo. This is very slow to do with cljsbuild.&lt;/li&gt;
&lt;li&gt;Cljsbuild doesn&apos;t support Google Closure&apos;s modules capability;
where we have a single codebase producing multiple output files. We
need this so that we can put all the common libraries we use into
one &apos;core&apos; file and then each app file has only its implementation
code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Instead, we use shadow-build, which is ridiculously fast, and allows us
to produce a core library file and several app files from a single
codebase.&lt;/p&gt;
&lt;p&gt;Given all of that, today I&apos;ll show you how we&apos;ve put this system
together, with working code!&lt;/p&gt;
&lt;p&gt;I&apos;ll show you how we compose four Trapperkeeper services into
two systems - two for production and two for development:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;App&lt;/strong&gt;: Datomic and Pedestal&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dev&lt;/strong&gt;: Cljx and Shadow-build&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&apos;s the code so you can follow along:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robert-stuttaford/tk-app-dev&quot;&gt;https://github.com/robert-stuttaford/tk-app-dev&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;app-services&quot;&gt;App services&lt;/h2&gt;
&lt;p&gt;These run in both development and production contexts. Only the app
services run when you issue &lt;code&gt;lein tk&lt;/code&gt; at the command line, which makes
use of the &lt;code&gt;bootstrap.cfg&lt;/code&gt; file to determine how to satisfy
dependencies at startup. You can learn more in the
&lt;a href=&quot;https://github.com/puppetlabs/trapperkeeper/wiki/Bootstrapping&quot;&gt;Trapperkeeper bootstrapping&lt;/a&gt;
documentation. In fact, I heartily recommend reading
&lt;a href=&quot;https://github.com/puppetlabs/trapperkeeper/wiki&quot;&gt;all their documentation&lt;/a&gt;!&lt;/p&gt;
&lt;h3 id=&quot;datomic-service&quot;&gt;Datomic service&lt;/h3&gt;
&lt;p&gt;Code: &lt;a href=&quot;https://github.com/robert-stuttaford/tk-app-dev/tree/master/src/tkad/services/datomic.clj&quot;&gt;src/tkad/services/datomic.clj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This service manages our Datomic database connection, and ensures that
we have a database, and that all the schema we have defined is
present.&lt;/p&gt;
&lt;p&gt;It depends on the &lt;code&gt;ConfigService&lt;/code&gt;
(&lt;a href=&quot;https://github.com/puppetlabs/trapperkeeper/wiki/Built-in-Configuration-Service&quot;&gt;provided by Trapperkeeper&lt;/a&gt;)
to discover all the configured Datomic database uris.&lt;/p&gt;
&lt;p&gt;We ensure that schema is loaded by using the handy
&lt;a href=&quot;https://github.com/rkneufeld/conformity&quot;&gt;Conformity&lt;/a&gt; library, which
will only affect the database if there are actually changes to make.&lt;/p&gt;
&lt;p&gt;Once initialised, this service provides access to Datomic database
connections and to database values.&lt;/p&gt;
&lt;h3 id=&quot;pedestal-service&quot;&gt;Pedestal service&lt;/h3&gt;
&lt;p&gt;Code: &lt;a href=&quot;https://github.com/robert-stuttaford/tk-app-dev/tree/master/src/tkad/services/pedestal.clj&quot;&gt;src/tkad/services/pedestal.clj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This service manages the lifecycle of the Pedestal web server. Here we
configure all the interceptors, notably injecting config and Datomic
connections and current database values into each Pedestal request
context.&lt;/p&gt;
&lt;p&gt;This allows us to simply read from the provided database value in most
web requests, and ensures that - by default - our database queries use
a common time basis.&lt;/p&gt;
&lt;p&gt;Of course, we have the connection as well, which means we can easily
create new database values, submit transactions, and so on.&lt;/p&gt;
&lt;h2 id=&quot;dev-services&quot;&gt;Dev services&lt;/h2&gt;
&lt;p&gt;These services only ever run on a developer machine. When started,
both of these services watch the file-system for changes and recompile
their output as needed. As this automated reloading is in place once
the services are started, there&apos;s rarely a need to reset them.&lt;/p&gt;
&lt;p&gt;The other thing is that these services are not in the main &lt;code&gt;/src&lt;/code&gt;
source tree; instead they are in &lt;code&gt;/dev&lt;/code&gt; which is only added to the
source path for the &lt;code&gt;dev&lt;/code&gt; Leiningen profile. This prevents any of this
code from loading into memory in production, where all this output
would already have been compiled.&lt;/p&gt;
&lt;h3 id=&quot;cljx-service&quot;&gt;Cljx service&lt;/h3&gt;
&lt;p&gt;Code: &lt;a href=&quot;https://github.com/robert-stuttaford/tk-app-dev/tree/master/dev/services/cljx.clj&quot;&gt;dev/services/cljx.clj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pretty simple - compiles all .cljx files to both .clj and .cljs files
as they change. We make use of Juxt&apos;s
&lt;a href=&quot;https://github.com/juxt/dirwatch&quot;&gt;dirwatch&lt;/a&gt; library to watch the
file-system recursively, and only invoke &lt;code&gt;cljx/cljx-compile&lt;/code&gt; when
we know a &lt;code&gt;.cljx&lt;/code&gt; file changed.&lt;/p&gt;
&lt;h3 id=&quot;shadow-service&quot;&gt;Shadow service&lt;/h3&gt;
&lt;p&gt;Code: &lt;a href=&quot;https://github.com/robert-stuttaford/tk-app-dev/tree/master/dev/services/shadow.clj&quot;&gt;dev/services/shadow.clj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This one is interesting. Shadow-build is quite low-level to use (which
is great), so we added a thin layer over the top to support our own
use-case.&lt;/p&gt;
&lt;p&gt;First of all, we assume that Facebook&apos;s React will always be used, so
it&apos;s hardcoded as a preamble to all output, and its externs are used
for advanced compilation.&lt;/p&gt;
&lt;p&gt;Then, we have created two output modes (both of which produce
Javascript source maps):&lt;/p&gt;
&lt;h4 id=&quot;debug&quot;&gt;&lt;code&gt;:debug&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Writes to &lt;code&gt;(MODULE-NAME)-debug.js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Uses unminifed React.&lt;/li&gt;
&lt;li&gt;Output is not optimised and is pretty printed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;production&quot;&gt;&lt;code&gt;:production&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Writes to &lt;code&gt;(MODULE-NAME).js&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Uses minifed React.&lt;/li&gt;
&lt;li&gt;Output is &lt;code&gt;:advanced&lt;/code&gt; optimised and is not pretty printed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, we configure this service with data at the &lt;code&gt;:shadow&lt;/code&gt; key in
&lt;a href=&quot;https://github.com/robert-stuttaford/tk-app-dev/tree/master/project.clj#L51-L59&quot;&gt;project.clj&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:public-path&lt;/code&gt;: the path from which the app will load when
included in a HTML file, as an absolute web path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:target-path&lt;/code&gt;: the path to which output should be written,
relative to the project root.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:core-libs&lt;/code&gt;: a vector of all the root namespaces to include in
the &lt;code&gt;core.js&lt;/code&gt; output (so that individual app modules don&apos;t have
to). Dependent namespaces will be automatically included.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:externs&lt;/code&gt;: a vector of the externs files to use when building
&lt;code&gt;:production&lt;/code&gt; mode.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:modules&lt;/code&gt;: a vector of maps describing each app module, each with keys:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:id&lt;/code&gt;: a keyword to name the module. Used to produce the
filename.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:main&lt;/code&gt;: the root namespace for the app module.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each module defined in &lt;code&gt;:modules&lt;/code&gt; will &lt;em&gt;exclude&lt;/em&gt; any code that is
already present in &lt;code&gt;:core-libs&lt;/code&gt;. It is up to us to ensure that both
the core and the app Javascript is loaded on the page, as can be seen
in the only web view we have set up here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robert-stuttaford/tk-app-dev/tree/master/src/tkad/web/routes.clj#L20-L21&quot;&gt;src/tkad/web/routes.clj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&apos;s important to recognise that even with advanced optimisations,
these two Javascript files can interoperate!&lt;/p&gt;
&lt;h2 id=&quot;composing-services-as-systems&quot;&gt;Composing services as systems&lt;/h2&gt;
&lt;p&gt;Ok! So now that we understand what these services do, we can finally
see how to compose them into two systems. It&apos;s actually rather
simple - it&apos;s all explained in the comments:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robert-stuttaford/tk-app-dev/tree/master/dev/user.clj&quot;&gt;dev/user.clj&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, to actually start all of this up, you&apos;d follow these steps:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/robert-stuttaford/tk-app-dev
cd tk-app-dev
lein repl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And once the REPL is up, start the dev system:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(user/dev-go)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And start the app system:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(user/app-go)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After all the dust settles, you should be able to visit
&lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; and see the &lt;code&gt;Hello! You&apos;re in debug mode!&lt;/code&gt;
message rendered by the Om app.&lt;/p&gt;
&lt;p&gt;Now, when you change any &lt;code&gt;.clj&lt;/code&gt; or &lt;code&gt;.cljx&lt;/code&gt; file, you&apos;d use &lt;code&gt;(user/reset)&lt;/code&gt; to reload
your changes and reset the app system (which restarts the web server
and ensures that any new schema is present in your database)!&lt;/p&gt;
&lt;p&gt;And, when you change any &lt;code&gt;.cljx&lt;/code&gt; or &lt;code&gt;.cljs&lt;/code&gt; file, your ClojureScript code will
be automatically recompiled - usually quickly enough for it to be
ready by the time you refresh your browser.&lt;/p&gt;
&lt;p&gt;Awesome!&lt;/p&gt;
&lt;h3 id=&quot;caveat-an-escape-hatch-for-cljx&quot;&gt;Caveat: an escape hatch for cljx&lt;/h3&gt;
&lt;p&gt;Sometimes you might end up with a code-path from &lt;code&gt;dev/user&lt;/code&gt; that
depends on forms present in the &lt;code&gt;.clj&lt;/code&gt; output of the code in &lt;code&gt;.cljx&lt;/code&gt;
files, which, when missing, prevents the REPL from starting up.&lt;/p&gt;
&lt;p&gt;In case you do, you can simply use this command to compile the cljx
via Leiningen:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lein with-profile cljx cljx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&apos;ll invoke cljx in its own Leiningen profile which doesn&apos;t load
the &lt;code&gt;dev/&lt;/code&gt; code at all.&lt;/p&gt;
&lt;h2 id=&quot;emacs-shortcuts&quot;&gt;Emacs shortcuts&lt;/h2&gt;
&lt;p&gt;No Clojure how-to is complete without a snippet of Emacs lisp to add
to your dotfiles. Here are two simple keybinds for resetting the app
and dev systems respectively. The second one uses &lt;code&gt;shift+r&lt;/code&gt; instead of
just &lt;code&gt;r&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defun cider-repl-reset ()
  (interactive)
  (save-some-buffers)
  (with-current-buffer (cider-current-repl-buffer)
    (goto-char (point-max))
    (insert &amp;quot;(user/reset)&amp;quot;)
    (cider-repl-return)))

(global-set-key (kbd &amp;quot;C-c r&amp;quot;) &apos;cider-repl-reset)

(defun cider-repl-dev-reset ()
  (interactive)
  (save-some-buffers)
  (with-current-buffer (cider-current-repl-buffer)
    (goto-char (point-max))
    (insert &amp;quot;(user/dev-reset)&amp;quot;)
    (cider-repl-return)))

(global-set-key (kbd &amp;quot;C-c R&amp;quot;) &apos;cider-repl-dev-reset)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&apos;s it for today!&lt;/p&gt;
</content></entry><entry><title>Om interop with 3rd party JS libs</title><link href="http://www.stuttaford.me/2014/08/10/om-interop-with-3rd-party-libs/" /><updated>2018-01-11T15:57:15Z</updated><id>http://www.stuttaford.me/2014/08/10/om-interop-with-3rd-party-libs/</id><content type="html">&lt;p&gt;A couple days ago, I cheekily tweeted a piece of code for embedding
the fantastic &lt;a href=&quot;http://ace.c9.io/&quot;&gt;Ace&lt;/a&gt; Javascript editor in an Om app.
I say cheekily, because I wrote the code in the
&lt;a href=&quot;https://www.refheap.com&quot;&gt;RefHeap&lt;/a&gt; editor and didn&apos;t actually test it!&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot; align=&quot;center&quot;&gt;
&lt;p&gt;The essence of how to use icky mutable JS components like Ace editor with &lt;a href=&quot;https://twitter.com/hashtag/Om?src=hash&quot;&gt;#Om&lt;/a&gt; - well, with any &lt;a href=&quot;https://twitter.com/hashtag/ReactJS?src=hash&quot;&gt;#ReactJS&lt;/a&gt; really:&amp;#10;&amp;#10;&lt;a href=&quot;https://t.co/Tjx69JFsIk&quot;&gt;https://t.co/Tjx69JFsIk&lt;/a&gt;&lt;/p&gt;&amp;mdash; Robert Stuttaford (@RobStuttaford) &lt;a href=&quot;https://twitter.com/RobStuttaford/statuses/497397737923833856&quot;&gt;August 7, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;Anyone who was brave enough to test it out using this code as a
starting point would have run into several issues. This post attempts
to make up for those, by sharing how it works and providing usable code!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: Here&apos;s the full source:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robert-stuttaford/om-ace-demo/blob/master/src/om_ace_demo.cljs#L1&quot;&gt;https://github.com/robert-stuttaford/om-ace-demo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-basic-idea&quot;&gt;The basic idea&lt;/h2&gt;
&lt;p&gt;So, as you likely already know,
&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; (for which
&lt;a href=&quot;https://github.com/swannodette/om&quot;&gt;Om&lt;/a&gt; is a ClojureScript wrapper)
does things a little differently; it manages two virtual DOMs - one
representing the live DOM and one representing the new version of the
view you want rendered. It diffs between those two to determine the
minimum set of changes to make to the live DOM whenever your app has
to re-render.&lt;/p&gt;
&lt;p&gt;What this means for interop with non-React code is that we have to
opt React out of managing the live DOM for this code, but only once
React has created it for us. Once it&apos;s created, we represent to React
that nothing about the view changes from state change to state change.&lt;/p&gt;
&lt;p&gt;This causes the diff to yield no changes for this particular part of
the virtual DOM, which of course means no mutations will occur to the
live DOM nodes.&lt;/p&gt;
&lt;h2 id=&quot;getting-ace-on-the-page&quot;&gt;Getting Ace on the page&lt;/h2&gt;
&lt;p&gt;We&apos;re going to go through a working example with Ace. We&apos;ll look at:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How to instantiate an Ace instance&lt;/li&gt;
&lt;li&gt;How to populate the text editor from the Om global app state&lt;/li&gt;
&lt;li&gt;How to track the changes occuring in Ace as they happen&lt;/li&gt;
&lt;li&gt;And how to persist those changes back to the global Om state&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We&apos;ll use several life cycle protocol functions to interop with Ace. Here&apos;s a &lt;a href=&quot;https://github.com/swannodette/om/wiki/Documentation#life-cycle-protocols&quot;&gt;full reference of all the protocols in Om&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This code comes with a couple bonuses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We&apos;ll see how to use
&lt;a href=&quot;https://clojure.github.io/core.async/&quot;&gt;core.async&lt;/a&gt; to have two Om
components coordinate.&lt;/li&gt;
&lt;li&gt;We&apos;ll use the simple but seriously handy &lt;code&gt;defcomponent&lt;/code&gt; from
&lt;a href=&quot;https://github.com/Prismatic/om-tools&quot;&gt;om-tools&lt;/a&gt;, which &lt;accronym
title=&quot;Don&apos;t repeat yourself&quot;&gt;DRY&lt;/accronym&gt;s up all the &lt;code&gt;reify IProtocol&lt;/code&gt;
code you see in vanilla Om applications.&lt;/li&gt;
&lt;li&gt;Also, we&apos;ll use &lt;a href=&quot;https://github.com/r0man/sablono&quot;&gt;Ŝablono&lt;/a&gt; to
render HTML rather than the &lt;code&gt;om.dom&lt;/code&gt; namespace provided by Om. I
personally find it a lot easier to read and write.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&apos;s jump in!&lt;/p&gt;
&lt;h3 id=&quot;1-instantiate-an-ace-instance&quot;&gt;1. Instantiate an Ace instance&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(def *ace* (atom nil))                              ;; 1

(defcomponent editor-area [data owner]
  (render [_]
    (html [:div#ace {:style {:height &amp;quot;400px&amp;quot;}}]))   ;; 2
  (did-mount [_]                                    ;; 3
    (let [ace-instance (.edit js/ace                ;; 4
                              (.getDOMNode owner))] ;; 5
      (reset! *ace* ace-instance))))                ;; 6
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;First, we set up an &lt;code&gt;atom&lt;/code&gt; to store the reference to Ace so that we
can work with it later on. &lt;strong&gt;Fair warning&lt;/strong&gt;: this does mean you can
only use one instance of this component at a time - yay global
mutable state!&lt;/li&gt;
&lt;li&gt;We render a single &lt;code&gt;div&lt;/code&gt; using Ŝablono&apos;s &lt;code&gt;html&lt;/code&gt; macro.&lt;/li&gt;
&lt;li&gt;We use the &lt;code&gt;did-mount&lt;/code&gt; (from the &lt;code&gt;IDidMount&lt;/code&gt; protocol), as this is
called once, right after the component has been made live on the DOM.&lt;/li&gt;
&lt;li&gt;We invoke Ace&apos;s &lt;code&gt;edit&lt;/code&gt; decorator function, passing it the DOM node
that we get by...&lt;/li&gt;
&lt;li&gt;Using React&apos;s &lt;code&gt;getDOMNode&lt;/code&gt; function, passing in &lt;code&gt;owner&lt;/code&gt;, which is
the backing React component provided by Om.&lt;/li&gt;
&lt;li&gt;We store the Ace reference in the atom.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;2-populate-the-text-editor-from-the-om-global-app-state&quot;&gt;2. Populate the text editor from the Om global app state&lt;/h3&gt;
&lt;p&gt;We&apos;ll do this in two places; once on starting Ace up, and with a
separate life cycle protocol function. First, a helper function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn set-value! [value]
  (let [ace-instance (deref *ace*)                            ;; 1
        cursor       (.getCursorPositionScreen ace-instance)] ;; 2
    (.setValue ace-instance value cursor)))                   ;; 3
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;We get the reference from the atom.&lt;/li&gt;
&lt;li&gt;We grab the current text cursor position of the editor...&lt;/li&gt;
&lt;li&gt;And pass it back in when setting the new value, so that the cursor
doesn&apos;t jump around, if at all possible - sometimes it will if the
text changes dramatically.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok, so now we can set the editor value from the global state, using a
key of &lt;code&gt;:value&lt;/code&gt; for this particular state map:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defcomponent editor-area [data owner]
  ...
  (did-mount [_]
    (let [ace-instance (.edit js/ace
                              (.getDOMNode owner))]
      (reset! *ace* ace-instance)
      (set-value! (:value data))))                  ;; 1
  (will-update [_ next-data next-state]
    (set-value! (:value next-data))))               ;; 2
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Set it on start up from the initial Om cursor.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;will-update&lt;/code&gt; (from, you guessed it, the &lt;code&gt;IWillUpdate&lt;/code&gt;
protocol) to set the data from the incoming state transition cursor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Great! We have an editor on the page!&lt;/p&gt;
&lt;h2 id=&quot;3-track-the-changes-in-ace&quot;&gt;3. Track the changes in Ace&lt;/h2&gt;
&lt;p&gt;Now we&apos;ll use Ace&apos;s on change callback to catch changes as they
happen.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn change-handler []                             ;; 1
  ???)

(defcomponent editor-area [data owner]
  ...
  (did-mount [_]
    (let [ace-instance (.edit js/ace
                              (.getDOMNode owner))]
      (reset! *ace* ace-instance)
      (.. ace-session
          getSession
          (on &amp;quot;change&amp;quot; change-handler))             ;; 2
      (set-value! (:value data))))
  ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Create a change handler function.&lt;/li&gt;
&lt;li&gt;Here we&apos;re using Clojure&apos;s nifty &lt;code&gt;..&lt;/code&gt; interop convenience - here&apos;s the
&lt;a href=&quot;http://grimoire.arrdem.com/1.6.0/clojure.core/DOT__DOT/&quot;&gt;reference on Grimoire&lt;/a&gt;
for that.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok, but what do we put into that change handler?&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&quot;interlude&quot;&gt;Interlude&lt;/h4&gt;
&lt;p&gt;At this point, we &lt;em&gt;could&lt;/em&gt; simply write the changes right back into the
global app state, but there&apos;s a problem with this approach.&lt;/p&gt;
&lt;p&gt;Doing so will cause that &lt;code&gt;will-update&lt;/code&gt; function to run, which will
unnecessarily update Ace to the value it already has. Remember,
React isn&apos;t managing this DOM node - there&apos;s no fancy diffing to save
extraneous work!&lt;/p&gt;
&lt;p&gt;Instead, we&apos;ll use
&lt;a href=&quot;https://github.com/swannodette/om/blob/master/CHANGES.md#071&quot;&gt;Om 0.7.1&lt;/a&gt;&apos;s
new experimental &lt;code&gt;set-state-nr!&lt;/code&gt; function to keep track of the changes
without triggering a re-render, and provide a Save button for the user
to click when they want their changes committed.&lt;/p&gt;
&lt;p&gt;That way, we have the editor value available immediately, but only
commit it when the user wants it. Why might we want it immediately? Well, we
might decide to provide a real-time preview or validation capability!&lt;/p&gt;
&lt;p&gt;We also need another component to compose the Save button and the
editor we&apos;ve just built, as we can&apos;t add any more UI to this component
thanks to the way we&apos;re opting out React rendering.&lt;/p&gt;
&lt;p&gt;Because of this, we&apos;ll need to coordinate between the container and
editor components when the user clicks Save, so that the editor can
transfer the editor value from local to global state.&lt;/p&gt;
&lt;p&gt;That&apos;s where the core.async comes in.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;3-track-the-changes-in-ace---round-two&quot;&gt;3. Track the changes in Ace - round two&lt;/h2&gt;
&lt;p&gt;Right. Let&apos;s get the value from Ace into local state:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn change-handler [owner]
  (om/set-state-nr! owner :edited-value             ;; 1
                    (.getValue (deref *ace*))))     ;; 2

(defcomponent editor-area [data owner]
  ...
  (did-mount [_]
    (let [ace-instance (.edit js/ace
                              (.getDOMNode owner))]
      (reset! *ace* ace-instance)
      (.. ace-instance
          getSession
          (on &amp;quot;change&amp;quot; #(change-handler owner))     ;; 3
      (set-value! (:value data))))
  ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Our handler writes an &lt;code&gt;:edited-value&lt;/code&gt; to the component&apos;s local
state via &lt;code&gt;owner&lt;/code&gt;...&lt;/li&gt;
&lt;li&gt;Using the value from the Ace instance.&lt;/li&gt;
&lt;li&gt;We make sure to update the event listener to pass in &lt;code&gt;owner&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we have the whole interop round-trip working - the text value
going into Ace and back out again.&lt;/p&gt;
&lt;p&gt;Let&apos;s put that container together:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defcomponent editor [data owner]
  (init-state [_] {:editor-chan (chan)})                     ;; 1
  (render-state [_ {:keys [editor-chan]}]                    ;; 2
    (html
     [:div
      [:button {:onClick #(put! editor-chan :save!)} &amp;quot;Save&amp;quot;] ;; 3
      (-&amp;gt;editor-area data                                    ;; 4
                     {:init-state                            ;; 5
                      {:editor-chan editor-chan}})])))       ;; 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&apos;s quite a bit going on here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We use the &lt;code&gt;init-state&lt;/code&gt; function (yep, from the &lt;code&gt;IInitState&lt;/code&gt;
protocol) to create a new async channel. It&apos;s important to do this
inside the right life cycle function, as we only want it to be created
once.&lt;/li&gt;
&lt;li&gt;We use the &lt;code&gt;render-state&lt;/code&gt; function (you&apos;re right, from the
&lt;code&gt;IRenderState&lt;/code&gt; protocol), which is simply the &lt;code&gt;IRender&lt;/code&gt; protocol
with a convenient way to get at the local state baked in; as a function
argument. Thanks to that, we destructure the channel out.&lt;/li&gt;
&lt;li&gt;We have our mighty Save button, which simply writes the keyword &lt;code&gt;:save!&lt;/code&gt; to
the channel every time it is clicked.&lt;/li&gt;
&lt;li&gt;We instantiate our &lt;code&gt;editor-area&lt;/code&gt; component, using om-tools&apos;
shorthand &lt;br&gt;&lt;code&gt;-&amp;gt;component&lt;/code&gt; syntax, which boils down to &amp;quot;&lt;code&gt;om/build component&lt;/code&gt;&amp;quot;.&lt;/li&gt;
&lt;li&gt;We pass an initial state for our editor using
&lt;a href=&quot;https://github.com/swannodette/om/wiki/Documentation#build&quot;&gt;om/build&lt;/a&gt;&apos;s
third argument. This will become available as local state inside
&lt;code&gt;editor-area&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;And that state is simply a map with the channel we created at 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ok. Now we have the appropriate signalling in place to know when to
transfer the value from local to global state.&lt;/p&gt;
&lt;p&gt;Now, inside &lt;code&gt;editor-area&lt;/code&gt;, we just need to respond to that signal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defcomponent editor-area [data owner]
  ...
  (will-mount [_]                                          ;; 1
    (let [editor-chan (om/get-state owner :editor-chan)]   ;; 2
      (go                                                  ;; 3
        (while true                                        ;; 4
          (when (= :save! (&amp;lt;! editor-chan))                ;; 5
            (when-let [edited-value
                       (om/get-state owner :edited-value)] ;; 6
              (om/update! data :value edited-value)))))))  ;; 7
  ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Set everything up in the &lt;code&gt;will-mount&lt;/code&gt; function (from the
&lt;code&gt;IWillMount&lt;/code&gt; protocol, of course). We could do this in &lt;code&gt;did-mount&lt;/code&gt;,
too, but now you&apos;re aware that &lt;code&gt;will-mount&lt;/code&gt; exists :-)&lt;/li&gt;
&lt;li&gt;Grab the channel from local state.&lt;/li&gt;
&lt;li&gt;Start a core.async &lt;code&gt;go&lt;/code&gt; block, which allows us to write
synchronous-looking but-actually-asynchronous code.&lt;/li&gt;
&lt;li&gt;Loop endlessly, so that we can catch each successive channel value.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;&amp;lt;!&lt;/code&gt;, block until there&apos;s a value on the channel, and if that
value is &lt;code&gt;:save!&lt;/code&gt;...&lt;/li&gt;
&lt;li&gt;Try to get the edited value from local state...&lt;/li&gt;
&lt;li&gt;And if it&apos;s there, use &lt;code&gt;om/update!&lt;/code&gt; to place it in the global state map.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Phew! Now we have everything wired up.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here&apos;s the full source, again:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robert-stuttaford/om-ace-demo/blob/master/src/om_ace_demo.cljs#L1&quot;&gt;https://github.com/robert-stuttaford/om-ace-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We have covered quite a lot ground in just ±50 lines of code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We got a mutable non-React Javascript library to live in harmony with an
Om/React app, which showed us Javascript interop syntax and several Om life
cycle protocols in action.&lt;/li&gt;
&lt;li&gt;We used core.async to coordinate between two components, thus avoiding
callbacks between them.&lt;/li&gt;
&lt;li&gt;We saw how om-tools and Ŝablono look when used with Om, which is
mostly a feel-good thing, I believe it helps a lot in the long run.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;special-thanks&quot;&gt;Special thanks&lt;/h2&gt;
&lt;p&gt;To &lt;a href=&quot;https://twitter.com/levanderhart&quot;&gt;Luke VanderHart&lt;/a&gt; for the
conversation that led me to this insight.&lt;/p&gt;
</content></entry><entry><title>Configuration in Om apps</title><link href="http://www.stuttaford.me/2014/08/07/configuration-in-om-apps/" /><updated>2018-01-11T15:57:15Z</updated><id>http://www.stuttaford.me/2014/08/07/configuration-in-om-apps/</id><content type="html">&lt;p&gt;I&apos;ve found a nice and simple way for making configuration available to
all components in a ClojureScript
&lt;a href=&quot;https://github.com/swannodette/om&quot;&gt;Om&lt;/a&gt; application.&lt;/p&gt;
&lt;p&gt;As long as you have a React component reference, typically named
&lt;code&gt;owner&lt;/code&gt; in Om, you can use this pattern.&lt;/p&gt;
&lt;p&gt;The code that follows assumes a &lt;code&gt;:config&lt;/code&gt; key in the root of your
state map, and it assumes that the value for that key is also a map.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(def state
  (atom {:config {:media-path &amp;quot;/images/content/&amp;quot;}
         :header {:logo &amp;quot;avengers-logo.jpg&amp;quot;
                  :title &amp;quot;The Avengers&amp;quot;}}))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given that, we bootstrap the Om application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(om/root app state
         {:target (. js/document (getElementById &amp;quot;app&amp;quot;))
          :shared {:config (:config @state)}})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see on the last line, we put &lt;code&gt;:config&lt;/code&gt; into the &lt;code&gt;:shared&lt;/code&gt;
state facility that Om provides, which is available to all components
from this &lt;code&gt;om/root&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, it&apos;s still available directly to the root component, as
well, but now we&apos;ll have a consistent way to reach config from
anywhere.&lt;/p&gt;
&lt;p&gt;To access the config from within any component, however deeply nested,
we use &lt;code&gt;om/get-shared&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn header [data owner]
  (reify
    IRender
    (render [_]
      (let [config (om/get-shared owner :config)]
        (dom/div nil
                 (dom/img #js {:src (str (:media-path config)
                                         (:logo data))})
                 (dom/h1 nil (:title data)))))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&apos;s important to point out that the &lt;code&gt;:shared&lt;/code&gt; state can only be set
once at &lt;code&gt;om/root&lt;/code&gt;, so it&apos;s not meant as a global mutable state - we
have &lt;code&gt;atom&lt;/code&gt; for that :-)&lt;/p&gt;
&lt;p&gt;At this point, we&apos;re good. We have configuration data anywhere we need
it. We can go one step further, though, and provide a simpler
abstraction for the rest of our app to use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn config
  ([owner]
     (or (om/get-shared owner :config) {}))
  ([owner key]
     (get (config owner) key)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When called with just the owner, you&apos;ll get the whole config map back.
This is great when you need access to several keys and want to
destructure them out. When called with the owner and a key, it returns
whatever value that key has.&lt;/p&gt;
&lt;p&gt;Using this function also ensures that you have an empty map to work
with just in case you don&apos;t have &lt;code&gt;:config&lt;/code&gt; in your shared state.&lt;/p&gt;
&lt;p&gt;Now that we have that, what does our header component look like?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(defn header [data owner]
  (reify
    IRender
    (render [_]
      (dom/div nil
               (dom/img #js {:src (str (config owner :media-path)
                                       (:logo data))})
               (dom/h1 nil (:title data))))))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&apos;s a fair bit simpler to read than before. It&apos;s not &lt;em&gt;that&lt;/em&gt; much
cleaner, but when you have many components, the savings add up!&lt;/p&gt;
&lt;p&gt;Here&apos;s the full runnable source:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clojure&quot;&gt;(ns configuration-pattern
  (:require [om.core :as om :include-macros true]
            [om.dom :as dom :include-macros true]))

(defn config
  ([owner]
     (or (om/get-shared owner :config) {}))
  ([owner key]
     (get (config owner) key)))

(def state
  (atom {:config {:media-path &amp;quot;/images/content/&amp;quot;}
         :header {:logo &amp;quot;avengers-logo.jpg&amp;quot;
                  :title &amp;quot;The Avengers&amp;quot;}}))

;; without config helper
(defn header [data owner]
  (reify
    IRender
    (render [_]
      (let [config (om/get-shared owner :config)]
        (dom/div nil
                 (dom/img #js {:src (str (:media-path config)
                                         (:logo data))})
                 (dom/h1 nil (:title data)))))))

;; with config helper
(defn header [data owner]
  (reify
    IRender
    (render [_]
      (dom/div nil
               (dom/img #js {:src (str (config owner :media-path)
                                       (:logo data))})
               (dom/h1 nil (:title data))))))

(defn app [data owner]
  (reify
    IRender
    (render [_]
      (om/build header (:header data)))))

(om/root app state
         {:target (. js/document (getElementById &amp;quot;app&amp;quot;))
          :shared {:config (:config @state)}})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And there you have it. One less thing to worry about!&lt;/p&gt;
</content></entry><entry><title>Welcome!</title><link href="http://www.stuttaford.me/2014/08/04/welcome/" /><updated>2018-01-11T15:57:15Z</updated><id>http://www.stuttaford.me/2014/08/04/welcome/</id><content type="html">&lt;p&gt;Howdy, internet traveller!&lt;/p&gt;
&lt;p&gt;Here I hope to share some of my experiences working with the Clojure stack when building the Cognician platform.&lt;/p&gt;
&lt;p&gt;Topics will include technologies such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt; itself&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clojure/clojurescript&quot;&gt;ClojureScript&lt;/a&gt;, the Javascript variant&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://leiningen.org&quot;&gt;Leiningen&lt;/a&gt;, the build tool for Clojure&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.datomic.com/&quot;&gt;Datomic&lt;/a&gt;, an immutable database built with Clojure&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/swannodette/om&quot;&gt;Om&lt;/a&gt;, a ClojureScript wrapper for Facebook&apos;s React Javascript library&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/clojure/core.async/&quot;&gt;Core.async&lt;/a&gt;, a Clojure library for coordinating sequential processes in Clojure programs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And plenty more!&lt;/p&gt;
&lt;p&gt;At &lt;a href=&quot;https://www.cognician.com&quot;&gt;Cognician&lt;/a&gt;, we built our second generation SaaS application stack wholly with Clojure, using all of the above and many more. Having done this stuff &apos;for real&apos; for a couple years, I have many stories, tips, and how-tos to share.&lt;/p&gt;
&lt;p&gt;Of course, all of this stuff is my opinion, and the opinions of those who I&apos;ve chosen to agree with -- which brings us to the very important point that most of what I have to share, I learned from someone else in the community. I stand on the shoulders of giants :-)&lt;/p&gt;
&lt;p&gt;Let&apos;s see where this goes!&lt;/p&gt;
</content></entry></feed>